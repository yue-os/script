        Library.Unloaded = true
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/Library.lua"))()
Library:Notify("Discord link copied to clipboard! Paste it in your browser to join.")
    if type(dict) ~= "table" then
        warn("keysOf: Expected table, got " .. typeof(dict))
            table.insert(list, k)
		Library:Notify("No Plants_Physical found.")
		Library:Notify("🌍 Position saved!")
		Library:Notify("❌ Could not save position (HumanoidRootPart missing).")
    Library:Notify("Inventory sold!")
        if type(shopData) == "table" then
                    table.insert(result, name)
    table.sort(result, function(a,b)
    table.insert(gearList, "All")
                    table.insert(gearList, gearText.Text)
    table.insert(egglist, "All")
        table.insert(egglist, eggName)
local window = Library:CreateWindow({
local creditsTab = window:AddTab("Misc", "accessibility")
local mainTab = window:AddTab("Main", "book-user")
local shopTab = window:AddTab("Shop", "shopping-cart")
local eventTab = window:AddTab("Event", "sparkle")
local playerTab = window:AddTab("Player", "user")
local petTab = window:AddTab("Pet", "egg")
local group = mainTab:AddLeftGroupbox("Fruit/Sell")
local trowel = mainTab:AddRightGroupbox("Move Plant")
local plant = mainTab:AddLeftGroupbox("Plant")
local rShop = shopTab:AddRightGroupbox("UI")
local gearShop = shopTab:AddLeftGroupbox("Gear Shop")
local petGroup = shopTab:AddRightGroupbox("Egg Shop")
local dino = eventTab:AddLeftGroupbox("Dino Event")
local antiAfkGroup = playerTab:AddRightGroupbox("Anti-AFK")
local lPlayer = playerTab:AddLeftGroupbox("Player")
local pet = petTab:AddLeftGroupbox("Pets")
local hatch = petTab:AddRightGroupbox("Hatch")
    ["UI Settings"] = window:AddTab("UI Settings", "settings")
            Library:Notify("Auto TP & Sell enabled.")
                while autoSell and not Library.Unloaded do
            Library:Notify("Auto TP & Sell disabled.")
            Library:Notify("Noclip enabled.")
            Library:Notify("Noclip disabled.")
            Library:Notify("Speedwalk enabled.")
            Library:Notify("Speedwalk disabled.")
        if table.find(rawSelected, "All") then
            Library:Notify("Auto-buy enabled!")
                Library:Notify("Auto-buy disabled!")
            Library:Notify("Auto-buy disabled!")
	Library:Notify("Saved position has been reset. Please save a new one.")
        if table.find(eggselected, "All") then
                    table.insert(selectedeggs, name)
        Library:Notify("Selected eggs: " .. table.concat(selectedeggs, ", "))
            if eggName and table.find(selectedeggs, eggName) then
        Library:Notify("❌  Missing Can_Plant part!", 3)
  while not Library.Unloaded do
        Library:Notify("⚠️  Select a placement method first!")
        Library:Notify("⚠️  Save a position first!")
        Library:Notify("⚠️  Tick at least one egg!")
				and table.find(selectedeggs, tool:GetAttribute(inventory_enums.EggName))
            Library:Notify("Set player position!")
            Library:Notify("Character not found!", 3)
  while not Library.Unloaded do
    while not Library.Unloaded do
		Library:Notify("Auto Submit " .. (v and "✅ Enabled" or "❌ Disabled"))
local function findTableTopLabel()
			local tableTop = parentGui and parentGui.Parent
			if tableTop and tableTop:IsA("BasePart") and tableTop.Name == "TableTop" then
	while not Library.Unloaded do
		local timerLabel = findTableTopLabel()
    while not Library.Unloaded do
local merchantShop = shopTab:AddLeftGroupbox("Merchant Shop")
        if table.find(merchselected, "All") then
                    table.insert(selectedMerchantItem, name)
        Library:Notify("Selected items: " .. table.concat(selectedMerchantItem, ", "))
            Library:Notify("Auto-buy merch enabled!")
                while autoBuyMerch and not Library.Unloaded do
                        if table.find(selectedMerchantItem, "All") then
                                    table.insert(toBuy, merchName)
                Library:Notify("Auto-buy merch disabled!")
            Library:Notify("Auto-buy merch disabled!")
        if table.find(rawSelectedd, "All") then
                    table.insert(selectedGears, name)
        Library:Notify("Selected gears: " .. table.concat(selectedGears, ", "))
            Library:Notify("Auto-buy gears enabled!")
                while autoBuyGears and not Library.Unloaded do
                        if table.find(selectedGears, "All") then
                                    table.insert(toBuy, gearName)
                Library:Notify("Auto-buy gears disabled!")
            Library:Notify("Auto-buy gears disabled!")
--             Library:Notify("Auto buy all eggs enabled.")
--                 while autoBuyPetsToggle and not Library.Unloaded do
--             Library:Notify("Auto buy all eggs disabled.")
--         table.insert(eggs, info.EggName)
--     table.sort(eggs)
		table.insert(eggs, v.EggName)
	table.sort(eggs)
			Library:Notify("🚀 Auto-buy enabled.")
				while autoBuyPets and not Library.Unloaded do
					if table.find(targets, "All") then
			Library:Notify("🛑 Auto-buy disabled.")
            Library:Notify("Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
            -- Library:Notify("Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
            Library:Notify("Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
            Library:Notify("Gear Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
            Library:Notify("Gear Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
local selectedPlants = {} -- assume table for Multi=true dropdown
        Library:Notify("Min Weight set to: " .. tostring(minWeight))
        Library:Notify("Max Weight set to: " .. tostring(maxWeight))
    return table.find(selectedPlants, baseName) and weight >= minW and weight <= maxW
            Library:Notify("Auto Collect enabled!")
                while autoCollect and not Library.Unloaded do
                Library:Notify("Auto Collect disabled!")
            Library:Notify("Auto Collect disabled!")
local creditsGroup = creditsTab:AddLeftGroupbox("Discord")
        Library:Notify("Discord link copied! Paste in browser to join.")
        if table.find(rawSelected, "All") then
            Library:Notify("Auto Plant enabled!")
                while autoPlant and not Library.Unloaded do
                Library:Notify("Auto Plant disabled!")
            Library:Notify("Auto Plant disabled!")
            Library:Notify(
            Library:Notify("[AutoPlant] Couldn’t find HumanoidRootPart!", 3)
            Library:Notify("[AutoPlant] No position saved – click “Save Plant Position” first!", 4)
			Library:Notify("Max fruit weight set to: " .. num)
			Library:Notify("Invalid weight value.")
            while autoRemove and not Library.Unloaded do
                    if not (table.find(selectedFruits,"All") or table.find(selectedFruits,base)) then
	while not Library.Unloaded do
    table.insert(petlist, petName)
table.sort(petlist)
    if typeof(selectedpets) == "table" then
                table.insert(names, name)
                if val then table.insert(names, name) end
            print(table.concat(selectedpets, ", "))
                if val then table.insert(names, name) end
            Library:Notify("[AutoDNA] Disabled")
        Library:Notify("[AutoDNA] Enabled")
            while autoDNA and not Library.Unloaded do
    while not Library.Unloaded do
    if typeof(selectedpetss) == "table" then
                table.insert(names, name)
                if val then table.insert(names, name) end
            print(table.concat(selectedpetss, ", "))
                if val then table.insert(names, name) end
        Library:Notify("Min weight set to: " .. (minPetWeight or "none"))
        Library:Notify("Max weight set to: " .. (maxPetWeight or "none"))
        Library:Notify("Min age set to: " .. (minPetAge or "none"))
                while autosellpets and not Library.Unloaded do
                Library:Notify("[AutoGift] Enabled")
                while autogiftpets and not Library.Unloaded do
                Library:Notify("[AutoGift] Disabled")
            Library:Notify("[AutoGift] Turned Off")
                    table.insert(plantsList, name)
        if typeof(selected) == "table" then
                    table.insert(selectedPlantss, k)
            table.insert(selectedPlantss, selected)
		Library:Notify("⚠️ Please save a position first!")
		Library:Notify("🔍 No plant selected from dropdown.")
    while not Library.Unloaded do
                                Library:Notify(("❌ Missing %s"):format(input_req.ItemData.ItemName), 3)
	Default = {}, -- ✅ Use empty table for multi-select
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
ThemeManager:ApplyToTab(setting["UI Settings"])
