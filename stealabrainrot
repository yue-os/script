local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/Library.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/addons/SaveManager.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/addons/ThemeManager.lua"))()

local window = Library:CreateWindow({
    Title = "Y-Hub",
    Center = true,
    Icon = 128171209017859,
    AutoShow = true,
    ShowCustomCursor = false,
    Size = UDim2.fromOffset(500, 350),
    ToggleKeybind = Enum.KeyCode.LeftControl
})

local mainTab = window:AddTab("Main", "book-user")
local miscTab = window:AddTab("Misc", "settings")

local mainGroup = mainTab:AddLeftGroupbox("Main Features")
mainGroup:AddButton("Unload Y-Hub", function()
    Library:Unload()
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local FLOAT_SPEED = 40
local FLOAT_DURATION = 15
local FLOAT_RISE = 2.7

local isOn = false
local floatEndTime = 0
local floatConn = nil
local timerConn = nil
local startY = nil

local function getCharacter()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid") or character:WaitForChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")
    return character, humanoid, rootPart
end

local function stopFloat()
    isOn = false
    floatEndTime = 0
    startY = nil
    if floatConn then
        floatConn:Disconnect()
        floatConn = nil
    end
    if timerConn then
        timerConn:Disconnect()
        timerConn = nil
    end
end

local function startFloat()
    isOn = true
    floatEndTime = os.time() + FLOAT_DURATION
    local character, humanoid, rootPart = getCharacter()
    if not humanoid or not rootPart then stopFloat() return end

    startY = rootPart.Position.Y

    floatConn = RunService.Heartbeat:Connect(function()
        if not isOn then return end
        if os.time() >= floatEndTime then
            stopFloat()
            return
        end
        if humanoid.Health > 0 then
            humanoid:ChangeState(Enum.HumanoidStateType.Flying)
            local camera = workspace.CurrentCamera
            local lookVector = camera and camera.CFrame.LookVector or Vector3.new(0,0,-1)
            lookVector = Vector3.new(lookVector.X, 0, lookVector.Z)
            if lookVector.Magnitude > 0 then
                lookVector = lookVector.Unit
            end

            local pos = rootPart.Position
            local maxY = startY + FLOAT_RISE
            if pos.Y < maxY then
                local riseSpeed = math.min(FLOAT_SPEED, (maxY - pos.Y) * 10)
                rootPart.AssemblyLinearVelocity = lookVector * FLOAT_SPEED + Vector3.new(0, riseSpeed, 0)
            else
                rootPart.AssemblyLinearVelocity = lookVector * FLOAT_SPEED
                if math.abs(pos.Y - maxY) > 0.1 then
                    rootPart.CFrame = CFrame.new(pos.X, maxY, pos.Z, rootPart.CFrame:VectorToWorldSpace(Vector3.new(1,0,0)), rootPart.CFrame:VectorToWorldSpace(Vector3.new(0,1,0)), rootPart.CFrame:VectorToWorldSpace(Vector3.new(0,0,1)))
                end
            end
        end
    end)

    humanoid.Died:Connect(function()
        stopFloat()
    end)
end

local floattoggle = mainGroup:AddToggle("float", {
    Text = "Float",
    Default = false,
    Callback = function(state)
        float = state
        if float then
            startFloat()
        else
            stopFloat()
        end
    end
})

floattoggle:AddKeyPicker("floatkey", {
    Text = "Float",
    Default = "F",
    Mode = "Toggle",
    Callback = function(state)
        floatt = state
        if floatt then
            startFloat()
        else
            stopFloat()
        end
    end
})


local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local infinityJumpEnabled = false

local function enableInfinityJump()
    infinityJumpEnabled = true
end

local function disableInfinityJump()
    infinityJumpEnabled = false
end

local COOLDOWN = 0.5
local JUMP_FORCE = 50
local JUMP_DURATION = 0.2
local lastJumpTime = 0
local isJumping = false
UserInputService.JumpRequest:Connect(function()
    if infinityJumpEnabled then
        local now = os.clock()
        local character = player.Character
        if now - lastJumpTime < COOLDOWN or isJumping then return end
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoid or rootPart then
                isJumping = true
                lastJumpTime = now
            end
            if rootPart:CanSetNetworkOwnership() then
                rootPart:SetNetworkOwner(player)
            end
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
            bodyVelocity.Velocity = Vector3.new(0, JUMP_FORCE, 0)
            bodyVelocity.Parent = rootPart
            local connection
            connection = game:GetService("RunService").Heartbeat:Connect(function()
                if os.clock() - lastJumpTime >= JUMP_DURATION then
                    if bodyVelocity and bodyVelocity.Parent then
                        bodyVelocity:Destroy()
                    end
                    if rootPart:CanSetNetworkOwnership() then
                        rootPart:SetNetworkOwner(nil)
                    end
                    isJumping = false
                    connection:Disconnect()
                end
            end)
        end
    end
end)

mainGroup:AddToggle("infinityjump", {
    Text = "Infinity Jump",
    Default = false,
    Callback = function(state)
        infinite = state
        if infinite then
            enableInfinityJump()
        else
            disableInfinityJump()
        end
    end
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local speedBoostEnabled = false
local BOOSTED_SPEED = 50
local DEFAULT_SPEED = 24
local isBoosted = false
local currentConnection = nil

local function setSpeedBoost(state)
    speedBoostEnabled = state
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoid and rootPart and humanoid.MoveDirection.Magnitude > 0 then
            local moveDir = humanoid.MoveDirection
            rootPart.Velocity = Vector3.new(
                moveDir.X * BOOSTED_SPEED,
                rootPart.Velocity.Y,
                moveDir.Z * BOOSTED_SPEED
            )
        end
    end
end

player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").WalkSpeed = rootPart.Velocity and BOOSTED_SPEED or DEFAULT_SPEED
end)

-- mainGroup:AddToggle("speedboost", {
--     Text = "Speed Boost",
--     Default = false,
--     Callback = function(state)
--         speedb = state
--         if speedb then
--             setSpeedBoost(true)
--         else
--             setSpeedBoost(false)
--         end
--     end
-- })

local player = game:GetService("Players").LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local root = char:WaitForChild("HumanoidRootPart")

local function updateCharacter()
    char = player.Character or player.CharacterAdded:Wait()
    root = char:WaitForChild("HumanoidRootPart")
end

local function teleportToSky()
    if not root then updateCharacter() end
    if root then
        root.CFrame = root.CFrame + Vector3.new(0, 200, 0)
    end
end

local function teleportToGround()
    if not root then updateCharacter() end
    if root then
        root.CFrame = root.CFrame - Vector3.new(0, 50, 0)
    end
end

local steal = mainTab:AddLeftGroupbox("Steal")
local stealtog = steal:AddToggle("stealt", {
    Text = "Steal",
    Default = false,
    Callback = function(state)
        stealt = state
        if stealt then
            teleportToSky()
        else
            teleportToGround()
        end
    end
})
stealtog:AddKeyPicker("stealkey", {
    Text = "Steal",
    Default = "R",
    Mode = "Toggle",
    Callback = function(state)
        stealtt = state
        if stealtt then
            teleportToSky()
        else
            teleportToGround()
        end
    end
})

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    root = newChar:WaitForChild("HumanoidRootPart")
end)


ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:SetIgnoreIndexes({"MenuKeybind"})

ThemeManager:SetFolder("Y-Hub")
SaveManager:SetFolder("Y-Hub/Steal-a-Brainrot")

ThemeManager:ApplyToTab(miscTab)
SaveManager:BuildConfigSection(miscTab)

if SaveManager:GetAutoloadConfig() == "none" then
    SaveManager:SaveAutoloadConfig("Steal-a-Brainrot")
end

SaveManager:LoadAutoloadConfig()
print("Autosaving to:", SaveManager:GetAutoloadConfig())
SaveManager:AutoSave(1)
