local CoreGui = game:GetService("CoreGui")
local obsidian = "Obsidian"

for _, v in ipairs(CoreGui:GetDescendants()) do
    if v:IsA("ScreenGui") and v.Name == obsidian then
        v:Destroy()
    else
    end
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/Library.lua"))()
local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local autoSubmit = false
local autoSubmitt = false
local fruitThreshold = 10
local autoSell = false
local highlightToggle = false
local currentHighlight = nil
local currentBillboard = nil
local lastBiggest = nil
local flyEnabled = false
local noclipEnabled = false
local speedwalkEnabled = false
local speedValue = 16
local flyConn, noclipConn, speedConn
local autoBuySeeds = false
local savedPosition = nil
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()
local sign = workspace.SummerHarvestEvent.Sign
local part = sign:GetChildren()[4]
local billboardGui = part:FindFirstChild("BillboardGui")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemModule = require(ReplicatedStorage:WaitForChild("Item_Module"))
local MutationHandler = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("MutationHandler"))
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local FormatWithCommas = require(ReplicatedStorage.Modules:WaitForChild("CommaFormatNumber"))

local setclipboard = setclipboard or function(text)
    if syn then
        syn.write_clipboard(text)
    elseif clipboard_set then
        clipboard_set(text)
    else
        print("Clipboard not supported. Link: https://discord.gg/WswepWXvr9")
    end
end

setclipboard("https://discord.gg/WswepWXvr9")
Library:Notify("Discord link copied to clipboard! Paste in browser to join.")

local myFarm
for i, farm in ipairs(workspace.Farm:GetChildren()) do
    local owner = farm:WaitForChild("Important")
                      :WaitForChild("Data")
                      :FindFirstChild("Owner")
    if owner and tostring(owner.Value) == tostring(player) then
        myFarm = farm
        farmNumber = i
        
        break
    end
end
local summerFruits = {
    ["Pineapple"] = true, ["Watermelon"] = true, ["Cauliflower"] = true, ["Green Apple"] = true,
    ["Banana"] = true, ["Avocado"] = true, ["Kiwi"] = true, ["Prickly Pear"] = true,
    ["Feijoa"] = true, ["Sugar Apple"] = true, ["Loquat"] = true, ["Wild Carrot"] = true,
    ["Pear"] = true, ["Cantaloupe"] = true, ["Parasol Flower"] = true, ["Rosy Delight"] = true,
    ["Elephant Ears"] = true, ["Bell Pepper"] = true, ["Carrot"] = true, ["Blueberry"] = true,
    ["Tomato"] = true, ["Strawberry"] = true, ["Deliphinium"] = true, ["Lili of the Valley"] = true,
    ["Traveler\'s Fruit"] = true, ["Peace Lily"] = true, ["Aloe Vera"] = true, ["Guanabana"] = true,
    ["White Mullberry"] = true, ["Pitcher Plant"] = true, ["Rafflesia"] = true
}
local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

local function getBaseName(itemName)
    local base = itemName:match("^(.-) %[[^%]]+%]$")
    return base or itemName
end

local function equipSummerFruit()
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local baseName = getBaseName(item.Name)
            if summerFruits[baseName] then
                item.Parent = character
                
                break
            end
        end
    end
end

local function getOwnFarmSpawnCFrame()
    for _, farm in ipairs(workspace.Farm:GetChildren()) do
        local important = farm:FindFirstChild("Important")
        local data = important and important:FindFirstChild("Data")
        local owner = data and data:FindFirstChild("Owner")
        if owner and owner.Value == player.Name then
            local spawnPoint = farm:FindFirstChild("Spawn_Point")
            if spawnPoint and spawnPoint:IsA("BasePart") then
                return spawnPoint.CFrame
            end
        end
    end
    return nil
end

local function submitSummer()
    while autoSubmit do
        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("SummerHarvestRemoteEvent"):FireServer("SubmitAllPlants")
        task.wait(0.1)
    end
end

local function keysOf(dict)
    local list = {}
    for k, v in pairs(dict) do
        if v then
            table.insert(list, k)
        end
    end
    return list
end

local function tpAndSell()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        local returnCFrame = getOwnFarmSpawnCFrame()
        hrp.CFrame = CFrame.new(
            86.5854721, 2.76619363, 0.426784277,
            0, 0, -1,
            0, 1, 0,
            1, 0, 0
        )
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        Library:Notify("Teleported and sold inventory!")
        if returnCFrame then
            task.wait(0.2)
            hrp.CFrame = returnCFrame
            Library:Notify("Returned to your garden spawn point!")
        else
            Library:Notify("Could not find your garden spawn point!")
        end
    else
        Library:Notify("HumanoidRootPart not found!")
    end
end

local function getFruitCount()
    local bag = player.Backpack
    local count = 0
    for _, v in pairs(bag:GetChildren()) do
        if v:FindFirstChild("Weight") and v:FindFirstChild("Variant") then
            count = count + 1
        end
    end
    return count
end

local function removeHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
    if currentBillboard then
        currentBillboard:Destroy()
        currentBillboard = nil
    end
end
local function CalculatePlantValue(plant)
	local itemString = plant:FindFirstChild("Item_String")
	local itemName = itemString and itemString.Value or plant.Name

	local variant = plant:FindFirstChild("Variant")
	if not variant then return 0 end

	local weight = plant:FindFirstChild("Weight")
	if not weight then return 0 end

	local baseData = ItemModule.Return_Data(itemName)
	if not baseData or #baseData < 3 then
		warn("Invalid ItemData for:", itemName)
		return 0
	end

	local variantMultiplier = ItemModule.Return_Multiplier(variant.Value)
	local valueMulti = MutationHandler:CalcValueMulti(plant)
	local clamp = math.clamp(weight.Value / baseData[2], 0.95, 1e8)

	return math.round(baseData[3] * valueMulti * variantMultiplier * (clamp * clamp))
end

local function highlightBiggestFruit()
	local farm = nil
	for _, f in ipairs(workspace.Farm:GetChildren()) do
		local important = f:FindFirstChild("Important")
		local data = important and important:FindFirstChild("Data")
		local owner = data and data:FindFirstChild("Owner")
		if owner and owner.Value == player.Name then
			farm = f
			break
		end
	end
	if not farm then
		Library:Notify("No owned farm found.")
		removeHighlight()
		lastBiggest = nil
		return
	end

	local plants = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
	if not plants then
		Library:Notify("No Plants_Physical found.")
		removeHighlight()
		lastBiggest = nil
		return
	end

	local biggest, maxWeight = nil, -math.huge
	for _, plant in ipairs(plants:GetChildren()) do
        local fruitsFolder = plant:FindFirstChild("Fruits")
        if fruitsFolder then
            for _, fruit in ipairs(fruitsFolder:GetChildren()) do
                local weightObj = fruit:FindFirstChild("Weight")
                if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
                    biggest = fruit
                    maxWeight = tonumber(weightObj.Value)
                end
            end
        end
    end


	if biggest ~= lastBiggest then
		removeHighlight()
		lastBiggest = biggest
		if biggest and biggest:IsA("Model") then
			
			local highlight = Instance.new("Highlight")
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.Adornee = biggest
            highlight.Parent = biggest
            currentHighlight = highlight

            -- Disconnect old rainbow connection if it exists
            if rainbowConnection then
                rainbowConnection:Disconnect()
            end

            -- Start rainbow animation
            rainbowConnection = RunService.RenderStepped:Connect(function()
                local hue = (tick() * 0.5) % 1 -- adjust speed here
                local color = Color3.fromHSV(hue, 1, 1)
                if currentHighlight then
                    currentHighlight.FillColor = color
                    currentHighlight.OutlineColor = color:lerp(Color3.new(1, 1, 1), 0.2) -- make outline slightly brighter
                end
            end)


			local head = biggest:FindFirstChildWhichIsA("BasePart")
			if head then
				local value = CalculatePlantValue(biggest)

				local bb = Instance.new("BillboardGui")
				bb.Size = UDim2.new(0, 160, 0, 60)
				bb.AlwaysOnTop = true
				bb.StudsOffset = Vector3.new(0, 3, 0)
				bb.Adornee = head
				bb.Parent = head

				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(255, 255, 255) -- fallback
                label.TextStrokeTransparency = 0.2
                label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                label.TextScaled = true
                label.Font = Enum.Font.FredokaOne
                label.RichText = true
                label.Text = string.format(
                    "<font color='rgb(255,255,255)'>Weight: %.2fkg</font>\n<font color='rgb(255,200,0)'>Price: %s ¢</font>",
                    maxWeight,
                    FormatWithCommas(value)
                )
				label.Parent = bb
				currentBillboard = bb
			end
		end
	end
end

local function getShopSeeds()
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local seedShopGui = playerGui:WaitForChild("Seed_Shop")
    local seedsFrame = seedShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")

    local seedList = {}

    table.insert(seedList, "All")

    for _, seedFrame in pairs(seedsFrame:GetChildren()) do
        if seedFrame:IsA("Frame") then
            local mainFrame = seedFrame:FindFirstChild("Main_Frame")
            if mainFrame then
                local seedText = mainFrame:FindFirstChild("Seed_Text")
                if seedText and seedText:IsA("TextLabel") then
                    local rawName = seedText.Text or ""
                    
                    local cleaned = rawName:gsub("%s*[sS]eed%s*", ""):gsub("^%s*(.-)%s*$", "%1")
                    table.insert(seedList, cleaned)
                end
            end
        end
    end

    return seedList
end

local function savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        savedPosition = hrp.Position
        Library:Notify("Position saved!")
    else
        Library:Notify("Could not save position (HumanoidRootPart missing).")
    end
end

local function teleportTo(pos)
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then
        Library:Notify("Could not teleport (HumanoidRootPart missing).")
        return
    end
    if typeof(pos) == "Vector3" then
        hrp.CFrame = CFrame.new(pos)
    elseif typeof(pos) == "string" then
        local x, y, z = string.match(pos, "Vector3%s*%(([^,]+),%s*([^,]+),%s*([^)]+)%)")
        if x and y and z then
            hrp.CFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        end
    end
end

local function sellInventory()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    Library:Notify("Inventory sold!")
end


local function submitNightQuest()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent"):FireServer("SubmitAllPlants")
    Library:Notify("Submitted all plants for Night Quest!")
end

local function teleportSellReturn()
    savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
    task.wait(0.25)
    sellInventory()
    task.wait(0.2)
    if savedPosition then
        teleportTo(savedPosition)
        Library:Notify("Returned to saved position!")
    end
end

local function parseCompactTime(str)
    if not str or str == "" then return 0 end
    local mins = tonumber(str:match("(%d+)%s*Minute")) or 0
    local secs = tonumber(str:match("(%d+)%s*Second")) or 0
    return mins * 60 + secs
end

local function teleportNightQuestReturn()
    savePosition()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    hrp.CFrame = CFrame.new(-101.0422592163086, 4.400012493133545, -10.985257148742676)
    task.wait(0.25)
    submitNightQuest()
    task.wait(0.2)
    if savedPosition then
        teleportTo(savedPosition)
        Library:Notify("Returned to saved position!")
    end
end

local function favoriteEquippedTool()
    local char = player.Character
    local backpack = player.Backpack
    local tool = char and char:FindFirstChildOfClass("Tool") or backpack:FindFirstChildOfClass("Tool")
    if tool and tool:GetAttribute("Favorite") == true then
        ReplicatedStorage.GameEvents.Favorite_Item:FireServer({tool})
        Library:Notify("Favorited equipped tool!")
    else
        Library:Notify("No favorite tool equipped.")
    end
end

local function getHarvestShop()
    local harvestFrame = game:GetService("Players").LocalPlayer.PlayerGui.EventShop_UI.Frame.ScrollingFrame
    local harvestList = {}

    table.insert(harvestList, "All")

    for _, item in pairs(harvestFrame:GetChildren()) do
        if item:isA("Frame") then
            local mainFrame = item:FindFirstChild("Main_Frame")
            if mainFrame then
                local harvestText = mainFrame:FindFirstChild("Seed_Text")
                if harvestText and harvestText:isA("TextLabel") then
                    table.insert(harvestList, harvestText.Text)
                end
            end
        end
    end
    return harvestList
end

local function getGearShop()
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local gearShopGui = playerGui:WaitForChild("Gear_Shop")
    local gearsFrame = gearShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")

    local gearList = {}

    
    table.insert(gearList, "All")

    for _, gearFrame in pairs(gearsFrame:GetChildren()) do
        if gearFrame:IsA("Frame") then
            local mainFrame = gearFrame:FindFirstChild("Main_Frame")
            if mainFrame then
                local gearText = mainFrame:FindFirstChild("Gear_Text")
                if gearText and gearText:IsA("TextLabel") then
                    table.insert(gearList, gearText.Text)
                end
            end
        end
    end

    return gearList
end

task.spawn(function()
    while true do
        if billboardGui then
            local timerLabel = billboardGui:FindFirstChild("Timer")
            if timerLabel and timerLabel:IsA("TextLabel") then
                local timerValue = parseCompactTime(timerLabel.Text)
                local time = timerValue <= 0
            end
        end
        task.wait(1)
    end
end)

task.wait(1)

local window = Library:CreateWindow({
    Title = "Y-Hub",
    Center = true,
    AutoShow = true,
    Size = UDim2.fromOffset(350, 180),
    ShowCustomCursor = false,
    ToggleKeybind = Enum.KeyCode.LeftControl
})

local creditsTab = window:AddTab("Misc")
local mainTab = window:AddTab("Main")
local shopTab = window:AddTab("Shop")
local eventTab = window:AddTab("Event")
local playerTab = window:AddTab("Player")
local petTab = window:AddTab("Pet")

local utilGroup = mainTab:AddLeftGroupbox("Teleport")
local group = mainTab:AddLeftGroupbox("Fruit")
local group2 = mainTab:AddRightGroupbox("Auto Harvest")
local lPlayer = playerTab:AddLeftGroupbox("Player")
local rShop = shopTab:AddRightGroupbox("UI")
local summer = eventTab:AddLeftGroupbox("Summer Event")
local seedShop = shopTab:AddLeftGroupbox("Seed Shop")
local gearShop = shopTab:AddLeftGroupbox("Gear Shop")
local petGroup = shopTab:AddRightGroupbox("Egg Shop")
local plant = mainTab:AddLeftGroupbox("Plant")
local pet = petTab:AddLeftGroupbox("Pets")

group:AddSlider("fruit_slider", {
    Text = "Fruit Threshold",
    Min = 1,
    Max = 200,
    Default = 10,
    Rounding = 0,
    Callback = function(val)
        fruitThreshold = val
    end
})

group:AddToggle("auto_sell_toggle", {
    Text = "Auto Sell",
    Default = false,
    Callback = function(state)
        autoSell = state
        if autoSell then
            Library:Notify("Auto TP & Sell enabled.")
            task.spawn(function()
                while autoSell do
                    if getFruitCount() >= fruitThreshold then
                        tpAndSell()
                        task.wait(2)
                    end
                    task.wait(1)
                end
            end)
        else
            Library:Notify("Auto TP & Sell disabled.")
        end
    end
})

group:AddToggle("highlight_biggest_toggle", {
    Text = "Show Biggest",
    Tooltip = "ESP biggest fruit with weight and price ¢",
    Default = false,
    Callback = function(state)
        highlightToggle = state
        if highlightToggle then
            highlightBiggestFruit()
            conn = RunService.RenderStepped:Connect(function()
                if highlightToggle then
                    highlightBiggestFruit()
                end
            end)
        else
            if conn then conn:Disconnect() end
            removeHighlight()
            lastBiggest = nil
        end
    end
})

lPlayer:AddToggle("noclip_toggle", {
    Text = "Noclip",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if noclipEnabled then
            noclipConn = game:GetService("RunService").Stepped:Connect(function()
                local char = player.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            Library:Notify("Noclip enabled.")
        else
            if noclipConn then noclipConn:Disconnect() noclipConn = nil end
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            Library:Notify("Noclip disabled.")
        end
    end
})

lPlayer:AddSlider("speed_slider", {
    Text = "Speed",
    Min = 16,
    Max = 100,
    Default = 16,
    Rounding = 0,
    Callback = function(val)
        speedValue = val
        if speedwalkEnabled then
            local char = player.Character or player.CharacterAdded:Wait()
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.WalkSpeed = speedValue
            end
        end
    end
})

lPlayer:AddToggle("speedwalk_toggle", {
    Text = "Speedwalk",
    Default = false,
    Callback = function(state)
        speedwalkEnabled = state
        local char = player.Character or player.CharacterAdded:Wait()
        local hum = char:FindFirstChildOfClass("Humanoid")
        if speedwalkEnabled and hum then
            hum.WalkSpeed = speedValue
            speedConn = char.ChildAdded:Connect(function(child)
                if child:IsA("Humanoid") then
                    child.WalkSpeed = speedValue
                end
            end)
            Library:Notify("Speedwalk enabled.")
        else
            if hum then hum.WalkSpeed = 16 end
            if speedConn then speedConn:Disconnect() speedConn = nil end
            Library:Notify("Speedwalk disabled.")
        end
    end
})

local seedList = getShopSeeds()
local selectedSeeds = {}

seedShop:AddDropdown("seed_dropdown", {
    Values = seedList,
    Multi = true,
    Searchable = true,
    Text = "Seeds Available",
    Default = {},               
    Callback = function(selected)
        local rawSelected = keysOf(selected)

        
        if table.find(rawSelected, "All") then
            selectedSeeds = {}
            for _, name in ipairs(seedList) do
                if name ~= "All" then
                    table.insert(selectedSeeds, name)
                end
            end
        else
            selectedSeeds = rawSelected
        end

        Library:Notify("Selected seeds: " .. table.concat(selectedSeeds, ", "))
    end
})

seedShop:AddToggle("auto_buy_selected_seeds", {
    Text = "Auto Buy",
    Default = false,
    Callback = function(value)
        autoBuySeeds = value
        if autoBuySeeds then
            Library:Notify("Auto-buy enabled!")
            task.spawn(function()
                local event = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

                while autoBuySeeds do
                    if #selectedSeeds > 0 then
                        for _, seedName in ipairs(selectedSeeds) do
                            event:FireServer(seedName)
                        end
                    end
                    task.wait(0.5)
                end
                Library:Notify("Auto-buy disabled!")
            end)
        else
            Library:Notify("Auto-buy disabled!")
        end
    end
})

utilGroup:AddButton("Save Position", savePosition)
utilGroup:AddButton("Teleport to Saved Position", function()
    if savedPosition then
        teleportTo(savedPosition)
        Library:Notify("Teleported to saved position!")
    else
        Library:Notify("No position saved yet.")
    end
end)

group:AddButton("Sell Inventory", sellInventory)
group:AddButton("TP, Sell, Return", teleportSellReturn)

local harvestList = getHarvestShop()
local selectedHarvestShop = {}
local harvestShop = shopTab:AddLeftGroupbox("Harvest Shop")
harvestShop:AddDropdown("harvest_dropdown", {
    Text = "Harvest Shop Items",
    Values = harvestList,
    Multi = true,
    Searchable = true,
    Default = {},
    Callback = function(selected)
        local rawSelecteddd = keysOf(selected)
        
        if table.find(rawSelecteddd, "All") then
            selectedHarvestShop = {}
            for _, name in ipairs(harvestList) do
                if name ~= "All" then
                    table.insert(selectedHarvestShop, name)
                end
            end
        else
            selectedHarvestShop = rawSelecteddd
        end

        Library:Notify("Selected item(s): " .. table.concat(selectedHarvestShop, ", "))
    end
})

local gearList = getGearShop()
local selectedGears = {}
gearShop:AddDropdown("gear_dropdown", {
    Values = gearList,
    Multi = true,
    Searchable = true,
    Text = "Gears Available",
    Default = {},
    Callback = function(selected)
        local rawSelectedd = keysOf(selected)

        
        if table.find(rawSelectedd, "All") then
            selectedGears = {}
            for _, name in ipairs(gearList) do
                if name ~= "All" then
                    table.insert(selectedGears, name)
                end
            end
        else
            selectedGears = rawSelectedd
        end

        Library:Notify("Selected gears: " .. table.concat(selectedGears, ", "))
    end
})

local autobuyHarvest = false
harvestShop:AddToggle("auto_buy_harvest", {
    Text = "Auto Buy Harvest Shop Items",
    Default = false,
    Callback = function(state)
        autobuyHarvest = state
        if autobuyHarvest then
            Library:Notify("Auto-buy items enabled!")
            task.spawn(function()
                local event = game:GetService("ReplicatedStorage").GameEvents:WaitForChild("BuyEventShopStock")

                while autobuyHarvest do
                    if #selectedHarvestShop > 0 then
                        local toBuy = {}

                        if table.find(selectedHarvestShop, "All") then
                            
                            for _, itemName in ipairs(harvestList) do
                                if itemName ~= "All" then
                                    table.insert(toBuy, itemName)
                                end
                            end
                        else
                            toBuy = selectedHarvestShop
                        end

                        
                        for _, itemName in ipairs(toBuy) do
                            event:FireServer(itemName)
                        end
                    end
                    task.wait(0.5)
                end
                Library:Notify("Auto-buy item disabled!")
            end)
        else
            Library:Notify("Auto-buy item disabled!")
        end
    end
})

local autoBuyGears = false
gearShop:AddToggle("auto_buy_selected_gears", {
    Text = "Auto Buy",
    Default = false,
    Callback = function(value)
        autoBuyGears = value
        if autoBuyGears then
            Library:Notify("Auto-buy gears enabled!")
            task.spawn(function()
                local event = game:GetService("ReplicatedStorage").GameEvents:WaitForChild("BuyGearStock")

                while autoBuyGears do
                    if #selectedGears > 0 then
                        local toBuy = {}

                        if table.find(selectedGears, "All") then
                            
                            for _, gearName in ipairs(gearList) do
                                if gearName ~= "All" then
                                    table.insert(toBuy, gearName)
                                end
                            end
                        else
                            toBuy = selectedGears
                        end

                        
                        for _, gearName in ipairs(toBuy) do
                            event:FireServer(gearName)
                        end
                    end
                    task.wait(0.5)
                end
                Library:Notify("Auto-buy gears disabled!")
            end)
        else
            Library:Notify("Auto-buy gears disabled!")
        end
    end
})

local autoBuyPetsToggle = false
petGroup:AddToggle("auto_buy_pets_toggle", {
    Text = "Auto Buy All Eggs",
    Default = false,
    Callback = function(val)
        autoBuyPetsToggle = val
        if val then
            Library:Notify("Auto buy all pets enabled.")
            task.spawn(function()
                while autoBuyPetsToggle do
                    for i = 1, 3 do
                        for _, pet in ipairs({1, 2, 3}) do
                            ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(pet)
                            task.wait()
                        end
                    end
                    task.wait(60)
                end
            end)
        else
            Library:Notify("Auto buy all pets disabled.")
        end
    end
})

local cosmeticUI = rShop:AddToggle("cosmetic_toggle", {
    Text = "Cosmetic Shop",
    Default = false,
    Callback = function(state)
        cosmeticToggle = state
        local ui = player.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

cosmeticUI:AddKeyPicker("cosmetic_keybind", {
    Text = "Cosmetic Shop",
    Default = "R",
    Mode = "Toggle",
    Callback = function(state)
        cosmeticPicker = state
        local ui = player.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Cosmetic Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

local gearShop = rShop:AddToggle("gear_toggle", {
    Text = "Gear Shop",
    Default = false,
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Gear Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

gearShop:AddKeyPicker("gear_keybind", {
    Text = "Gear Shop",
    Default = "G",
    Mode = "Toggle",
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Gear Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

local seedUI = rShop:AddToggle("seed_toggle", {
    Text = "Seed Shop",
    Default = false,
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Seed_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Seed Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

seedUI:AddKeyPicker("seed_keybind", {
    Text = "Seed Shop",
    Default = "F",
    Mode = "Toggle",
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Seed_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Seed Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

local harvestShop = rShop:AddToggle("harvestshop_toggle", {
    Text = "Harvest Shop",
    Default = false,
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("EventShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Harvest Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})

harvestShop:AddKeyPicker("harvestshop_keybind", {
    Text = "Harvest Shop",
    Default = "C",
    Mode = "Toggle",
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("EventShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            Library:Notify("Harvest Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
        end
    end
})


rShop:AddButton("Daily Quest", function()
    local ui = player.PlayerGui:FindFirstChild("DailyQuests_UI")
    if ui then
        ui.Enabled = not ui.Enabled
        Library:Notify("Daily Quest UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
    end
end)


local antiAfkGroup = mainTab:AddRightGroupbox("Anti-AFK")
local antiAfkEnabled = false
local afkConnection

antiAfkGroup:AddToggle("anti_afk_toggle", {
    Text = "Enable Anti-AFK",
    Default = false,
    Callback = function(Value)
        antiAfkEnabled = Value

        if antiAfkEnabled then
            
            afkConnection = player.Idled:Connect(function()
                local VirtualUser = game:GetService("VirtualUser")
                VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                task.wait(1)
                VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            end)
            Library:Notify("Anti-AFK enabled!")
        else
            
            if afkConnection then
                afkConnection:Disconnect()
                afkConnection = nil
            end
            Library:Notify("Anti-AFK disabled!")
        end
    end
})

local minWeight, maxWeight = 0, 9999
local harvestFruitNames = {}


group2:AddInput("harvest_fruit_input", {
    Text = "Fruit Names (Leave blank if all)",
    Default = "",
    Tooltip = "Use comma(,) to seperate fruits",
    Callback = function(val)
        harvestFruitNames = {}
        for fruit in string.gmatch(val, "([^,]+)") do
            fruit = fruit:match("^%s*(.-)%s*$") 
            if fruit ~= "" then
                harvestFruitNames[fruit] = true
            end
        end
        Library:Notify("Harvest fruit filter set!")
    end
})

group2:AddInput("min_weight_input", {
    Text = "Min Weight (kg)",
    Default = "0",
    Callback = function(val)
        minWeight = tonumber(val) or 0
        Library:Notify("Min Weight set to: " .. tostring(minWeight))
    end
})

group2:AddInput("max_weight_input", {
    Text = "Max Weight (kg)",
    Default = "9999",
    Callback = function(val)
        maxWeight = tonumber(val) or 9999
        Library:Notify("Max Weight set to: " .. tostring(maxWeight))
    end
})

local function getBaseName(itemName)
    return itemName:match("^(.-) %[[^%]]+%]$") or itemName
end

local function harvestFilter(item, minW, maxW)
    if not item then return false end
    local weightObj = item:FindFirstChild("Weight")
    if not weightObj then return false end
    local weight = tonumber(weightObj.Value)
    if not weight then return false end
    local baseName = getBaseName(item.Name)
    
    if next(harvestFruitNames) == nil then
        return weight >= minW and weight <= maxW
    end
    return harvestFruitNames[baseName] and weight >= minW and weight <= maxW
end

local autoCollect = false
group2:AddToggle("auto_collect_toggle", {
    Text = "Auto Collect",
    Default = false,
    Callback = function(state)
        autoCollect = state
        if autoCollect then
            Library:Notify("Auto Collect enabled!")
            task.spawn(function()
                while autoCollect do
                    local players = game:GetService("Players")
                    local replicated_storage = game:GetService("ReplicatedStorage")
                    local get_farm = workspace.Farm:GetChildren()[farmNumber]
                    local byte_net_reliable = replicated_storage:WaitForChild("ByteNetReliable")
                    local buffer = buffer.fromstring("\1\1\0\1")

                    local local_player = players.LocalPlayer
                    local farm = get_farm
                    if not farm or not farm.Important or not farm.Important:FindFirstChild("Plants_Physical") then
                        Library:Notify("Could not find your farm plants.")
                        break
                    end

                    for _, v in next, farm.Important.Plants_Physical:GetChildren() do
                        if harvestFilter(v, minWeight, maxWeight) then
                            byte_net_reliable:FireServer(buffer, { v })
                        end
                        if v:FindFirstChild("Fruits", true) then
                            for _, i in next, v.Fruits:GetChildren() do
                                if harvestFilter(i, minWeight, maxWeight) then
                                    byte_net_reliable:FireServer(buffer, { i })
                                end
                            end
                        end
                    end
                    task.wait(2)
                end
                Library:Notify("Auto Collect disabled!")
            end)
        else
            Library:Notify("Auto Collect disabled!")
        end
    end
})

local module = require(game:GetService("ReplicatedStorage").Modules.PlantTraitsData)
local summerPlants = module.Summer

local targetFruits = {}
for plant, _ in pairs(summerPlants) do
    targetFruits[plant] = true
end

local function isTargetFruit(item)
    if not item then return false end
    local baseName = item.Name:match("^(.-) %[[^%]]+%]$") or item.Name
    return targetFruits[baseName] == true
end


local infiniteJump = false

lPlayer:AddToggle("infinite_jump_toggle", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(enabled)
        infiniteJump = enabled
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJump then
        local character = player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

local creditsGroup = creditsTab:AddLeftGroupbox("Discord")

creditsGroup:AddButton({
    Text = "Join Discord Server",
    Func = function()
        setclipboard("https://discord.gg/WswepWXvr9")
        Library:Notify("Discord link copied! Paste in browser to join.")
        pcall(function()
            if syn and syn.request then
                syn.request({Url = "https://discord.gg/WswepWXvr9", Method = "GET"})
            else
                game:HttpGet("https://discord.gg/WswepWXvr9")
            end
        end)
    end
})


task.spawn(function()
    while true do
        if billboardGui then
            local timerLabel = billboardGui:FindFirstChild("Timer")
            local checkEvent = billboardGui:FindFirstChild("TextLabel")
            if timerLabel and timerLabel:IsA("TextLabel") then
                local timerValue = parseCompactTime(timerLabel.Text)
                local event = checkEvent.Text
                local isHarvestOngoing = event == "Summer Harvest Ends:"
                
                local state = timerValue <= 0
                
                if autoSubmit and isHarvestOngoing then
                    for _, item in ipairs(backpack:GetChildren()) do
                        if item:IsA("Tool") then
                            local baseName = getBaseName(item.Name)
                            if summerFruits[baseName] then
                                
                                task.wait(0.1)
                                submitSummer()
                                task.wait(0.1)
                            end
                        end
                    end
                end
            end
        end
        task.wait(1)
    end
end)
local autoCollectTargetFruit = false
summer:AddToggle("auto_collect_targetfruit", {
    Text = "Auto Collect Summer Fruit",
    Default = false,
    Callback = function(state)
        autoCollectTargetFruit = state

        local checkEvent = billboardGui:FindFirstChild("TextLabel")
        local event = checkEvent.Text
        local isHarvestOngoing = event == "Summer Harvest Ends:"
        if autoCollectTargetFruit and isHarvestOngoing then
            Library:Notify("Auto Collect Target Fruit enabled!")

            task.spawn(function()
                while autoCollectTargetFruit do
                    
                    local fruitCount = 0
                    for _, item in ipairs(player.Backpack:GetChildren()) do
                        if item:IsA("Tool") then
                            fruitCount = fruitCount + 1
                        end
                    end

                    if fruitCount >= 200 then
                        Library:Notify("Backpack fruit limit reached (200). Waiting...")
                        
                        repeat
                            task.wait(2)
                            fruitCount = 0
                            for _, item in ipairs(player.Backpack:GetChildren()) do
                                if item:IsA("Tool") then
                                    fruitCount = fruitCount + 1
                                end
                            end
                        until fruitCount < 200 or not autoCollectTargetFruit
                        if not autoCollectTargetFruit then break end
                    end

                    local replicated_storage = game:GetService("ReplicatedStorage")
                    local byte_net_reliable = replicated_storage:WaitForChild("ByteNetReliable")
                    local buffer = buffer.fromstring("\1\1\0\1")
                    local farm = workspace.Farm:GetChildren()[farmNumber]

                    if not farm or not farm.Important or not farm.Important:FindFirstChild("Plants_Physical") then
                        Library:Notify("Could not find your farm plants.")
                        break
                    end

                    for _, v in ipairs(farm.Important.Plants_Physical:GetChildren()) do
                        if isTargetFruit(v) then
                            byte_net_reliable:FireServer(buffer, { v })
                        end

                        local fruits = v:FindFirstChild("Fruits", true)
                        if fruits then
                            for _, i in ipairs(fruits:GetChildren()) do
                                if isTargetFruit(i) then
                                    byte_net_reliable:FireServer(buffer, { i })
                                end
                            end
                            task.wait(1)
                        end
                    end

                    task.wait(1)
                end

                Library:Notify("Auto Collect Target Fruit disabled!")
            end)
        else
            Library:Notify("Auto Collect Target Fruit disabled!")
        end
    end
})


summer:AddToggle("summer_toggle", {
    Text = "Auto Submit Summer",
    Default = false,
    Callback = function(Value)
        autoSubmit = Value
        
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local seedData = require(ReplicatedStorage.Data.SeedData)

local function allSeed()
    local seeds = { "All" } 
    for _, data in pairs(seedData) do
        table.insert(seeds, data.SeedName)
    end
    return seeds
end

local seedList = allSeed()
local selectedSeeds = {}

plant:AddDropdown("seed_dropdown", {
    Values = seedList,
    Multi = true,
    Searchable = true,
    Text = "Seeds",
    Default = {},               
    Callback = function(selected)
        local rawSelected = keysOf(selected)

        
        if table.find(rawSelected, "All") then
            selectedSeeds = {}
            for _, name in ipairs(seedList) do
                if name ~= "All" then
                    table.insert(selectedSeeds, name)
                end
            end
        else
            selectedSeeds = rawSelected
        end

        Library:Notify("Selected seeds: " .. table.concat(selectedSeeds, ", "))
    end
})
local autoPlant = false
local seedIndex = 1

plant:AddToggle("auto_plant_toggle", {
    Text = "Auto Plant",
    Tooltip = "Stand at the place where you want to auto plant.",
    Default = false,
    Callback = function(state)
        autoPlant = state
        if autoPlant then
            if #selectedSeeds == 0 then
                Library:Notify("No seeds selected!")
                autoPlant = false
                return
            end

            Library:Notify("Auto Plant enabled!")
            task.spawn(function()
                while autoPlant do
                    local player = game:GetService("Players").LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local backpack = player:WaitForChild("Backpack")
                    local hrp = character:FindFirstChild("HumanoidRootPart")

                    if hrp and #selectedSeeds > 0 then
                        local fullSeedName = selectedSeeds[seedIndex]
                        seedIndex += 1
                        if seedIndex > #selectedSeeds then
                            seedIndex = 1
                        end

                        
                        local function findSeedTool(name)
                            for _, container in ipairs({backpack, character}) do
                                for _, item in ipairs(container:GetChildren()) do
                                    if item:IsA("Tool") and item.Name:match("^" .. name) then
                                        return item
                                    end
                                end
                            end
                            return nil
                        end

                        local tool = findSeedTool(fullSeedName)

                        if tool and tool.Parent ~= character then
                            tool.Parent = character
                            task.wait(0.3)
                        end

                        
                        if findSeedTool(fullSeedName) then
                            local cropName = fullSeedName:gsub(" Seed", "")
                            local pos = hrp.Position
                            local args = {
                                vector.create(pos.X, pos.Y, pos.Z),
                                cropName
                            }

                            game:GetService("ReplicatedStorage")
                                :WaitForChild("GameEvents")
                                :WaitForChild("Plant_RE")
                                :FireServer(unpack(args))
                        else
                            Library:Notify("Missing or unequipped: " .. fullSeedName)
                        end
                    end

                    task.wait(2)
                end
                Library:Notify("Auto Plant disabled!")
            end)
        else
            Library:Notify("Auto Plant disabled!")
        end
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local petRegistryModule = ReplicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"):WaitForChild("PetList")
local petRegistry = require(petRegistryModule)


local petlist = {}
for petName, _ in pairs(petRegistry) do
    table.insert(petlist, petName)
end
table.sort(petlist)

local selectedpets = {}

local function getSelectedNames()
    local names = {}
    if typeof(selectedpets) == "table" then
        if #selectedpets > 0 then
            
            for _, name in ipairs(selectedpets) do
                table.insert(names, name)
            end
        else
            
            for name, val in pairs(selectedpets) do
                if val then table.insert(names, name) end
            end
        end
    end
    return names
end

pet:AddDropdown("sellpetsd", {
    Text = "Pet List",
    Default = {},
    Multi = true,
    Searchable = true,
    Values = petlist,
    Callback = function(selected)
        print("Callback fired")
        selectedpets = selected
        
        if #selectedpets > 0 then
            print(table.concat(selectedpets, ", "))
        else
            local names = {}
            for name, val in pairs(selectedpets) do
                if val then table.insert(names, name) end
            end
            if #names > 0 then
                print(table.concat(names, ", "))
            else
                print("No pets selected")
            end
        end
    end
})

local function getBaseName(toolName)
    return (toolName:gsub("%s*%b[]", "")):gsub("^%s*(.-)%s*$", "%1")
end

pet:AddToggle("toggleselpet", {
    Text = "Auto Sell",
    Default = false,
    Callback = function(state)
        autosellpets = state

        if autosellpets then
            task.spawn(function()
                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local sellRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SellPet_RE")
                local player = Players.LocalPlayer

                while autosellpets do
                    local backpack = player.Backpack
                    local character = player.Character

                    for _, selectedName in ipairs(getSelectedNames()) do
                        for _, tool in ipairs(backpack:GetChildren()) do
                            if tool:GetAttribute("ItemType") == "Pet" then
                                local baseName = getBaseName(tool.Name)
                                if baseName == selectedName then
                                    local current = character:FindFirstChildOfClass("Tool")
                                    if current and current ~= tool then
                                        current.Parent = backpack
                                        task.wait(0.2)
                                    end

                                    tool.Parent = character

                                    local timeout = 3
                                    while tool.Parent ~= character and timeout > 0 do
                                        task.wait(0.1)
                                        timeout -= 0.1
                                    end

                                    if tool.Parent == character then
                                        sellRemote:FireServer(tool)
                                        task.wait(1)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local giftEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("GiftPet")
local acceptGiftRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("AcceptPetGift")
local giftNotification = LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("Gift_Notification")

pet:AddToggle("autoacceptpet", {
    Text = "Auto Accept Pet",
    Default = false,
    Callback = function(state)
        autoacceptpet = state
        
        if giftNotification then
            giftNotification:Destroy()
        end
        giftEvent.OnClientEvent:Connect(function(petUUID, petName, fromPlayerName)
            acceptGiftRemote:FireServer(true, petUUID)
        end)
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Modules
local giftingService = require(ReplicatedStorage.Modules.PetServices.PetGiftingService)
local activePets = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
local petRegistry = require(ReplicatedStorage.Data.PetRegistry)
local enumRegistry = require(ReplicatedStorage.Data.EnumRegistry.InventoryServiceEnums)

-- Constants
local MIN_DISTANCE = petRegistry.PetConfig.PET_GIFTING_CONFIG.MINIMUM_DISTANCE_FOR_GIFTING

-- Toggle state
local autogiftpets = false

-- Utility: Get base name (strip "[Weight] [Age]" etc)
local function getBaseName(toolName)
    return (toolName:gsub("%s*%b[]", "")):gsub("^%s*(.-)%s*$", "%1")
end

-- Utility: Find nearest valid player within range
local function getClosestPlayer()
    local closest = nil
    local shortest = math.huge
    local myChar = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    for _, other in ipairs(Players:GetPlayers()) do
        if other ~= LocalPlayer and other.Character then
            local dist = (myChar:GetPivot().Position - other.Character:GetPivot().Position).Magnitude
            if dist < MIN_DISTANCE and dist < shortest then
                closest = other
                shortest = dist
            end
        end
    end

    return closest
end

-- Toggle in UI
pet:AddToggle("autogiftpets", {
    Text = "Auto Gift Selected Pets",
    Tooltip = "Will gift pet to nearest player",
    Default = false,
    Callback = function(state)
        autogiftpets = state

        if autogiftpets then
            task.spawn(function()
                print("[AutoGift] Enabled")

                while autogiftpets do
                    local backpack = LocalPlayer:FindFirstChild("Backpack")
                    local character = player.Character
                    local targetPlayer = getClosestPlayer()

                    if targetPlayer and backpack then
                        for _, selectedName in ipairs(getSelectedNames()) do
                            for _, tool in ipairs(backpack:GetChildren()) do
                                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                                    local baseName = getBaseName(tool.Name)

                                    if baseName == selectedName and not tool:GetAttribute("d") then
                                        local currentTool = character:FindFirstChildOfClass("Tool")
                                        if currentTool and currentTool ~= tool then
                                            currentTool.Parent = backpack
                                            task.wait(0.1)
                                        end
                                        tool.Parent = character
                                        local timeout = 3
                                        while tool.Parent ~= character and timeout > 0 do
                                            task.wait(0.1)
                                            timeout -= 0.1
                                        end
                                        if tool.Parent == character then
                                            giftingService:GivePet(targetPlayer)
                                            task.wait(0.1)
                                        end

                                        break
                                    end
                                    
                                    local timeout = 3
                                    while tool.Parent ~= character and timeout > 0 do
                                        task.wait(0.1)
                                        timeout -= 0.1
                                    end

                                end
                            end
                        end
                    end

                    task.wait(1)
                end

                print("[AutoGift] Disabled")
            end)
        else
            print("[AutoGift] Turned Off")
        end
    end
})
