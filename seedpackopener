local backpack = player:WaitForChild("Backpack")
local seedData = require(ReplicatedStorage.Data.SeedData)
    ["Seed Pack"]         = "a",
    ["Seed"]              = "n",
    for _, v in pairs(backpack:GetChildren()) do
local function getSeedPacks()
	local SeedPackData = require(ReplicatedStorage.Data.SeedPackData)
	local seedPackNames = {}
	for name in pairs(SeedPackData.Packs) do
		table.insert(seedPackNames, name)
	table.sort(seedPackNames)
	return seedPackNames
	name = name:gsub("%s*Seed", "") -- remove trailing "Seed"
    local seeds = { "All" } 
    for _, data in pairs(seedData) do
        local cleanedName = cleanPlantName(data.SeedName)
        if not table.find(seeds, cleanedName) then
            table.insert(seeds, cleanedName)
    table.sort(seeds)
    return seeds
local function getShopSeeds()
    local seedShopGui = playerGui:WaitForChild("Seed_Shop")
    local seedsFrame = seedShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")
    local seedList = {}
    table.insert(seedList, "All")
    for _, seedFrame in pairs(seedsFrame:GetChildren()) do
        if seedFrame:IsA("Frame") then
            local mainFrame = seedFrame:FindFirstChild("Main_Frame")
                local seedText = mainFrame:FindFirstChild("Seed_Text")
                if seedText and seedText:IsA("TextLabel") then
                    local rawName = seedText.Text or ""
                    table.insert(seedList, cleaned)
    return seedList
                local name = entry.SeedName or entry.ItemName or rawName
local seed = window:AddTab("Seed", "seed")
local seedPack = seed:AddLeftGroupbox("Seed Pack")
local seedShop = shopTab:AddLeftGroupbox("Seed Shop")
local seedList = getShopSeeds()
local selectedSeeds = {}
seedShop:AddDropdown("seed_dropdown", {
    Values = seedList,
    Text = "Seeds Available",
            selectedSeeds = {}
            for _, name in ipairs(seedList) do
                    table.insert(selectedSeeds, name)
            selectedSeeds = rawSelected
        Library:Notify("Selected seeds: " .. table.concat(selectedSeeds, ", "))
seedShop:AddToggle("auto_buy_selected_seeds", {
        autoBuySeeds = value
        if autoBuySeeds then
                local event = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock")
                while autoBuySeeds and not Library.Unloaded do
                    if #selectedSeeds > 0 then
                        for _, seedName in ipairs(selectedSeeds) do
                            event:FireServer(seedName)
                        -- Library:Notify("Bought " .. seedName)
          for _, tool in ipairs(backpack:GetChildren()) do
    "Ancient Seed Pack",
	["Ancient Seed Pack"] = {
	["Seed Pack"] = "a",
	["Seed"] = "n",
	for _, tool in ipairs(backpack:GetChildren()) do
local seedUI = rShop:AddToggle("seed_toggle", {
    Text = "Seed Shop",
        local ui = player.PlayerGui:FindFirstChild("Seed_Shop")
            Library:Notify("Seed Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
seedUI:AddKeyPicker("seed_keybind", {
    Text = "Seed Shop",
        local ui = player.PlayerGui:FindFirstChild("Seed_Shop")
            Library:Notify("Seed Shop UI: " .. (ui.Enabled and "Enabled" or "Disabled"))
local function allSeed()
    local seeds = { "All" } 
    for _, data in pairs(seedData) do
        table.insert(seeds, data.SeedName)
        table.sort(seeds)
    return seeds
local seedLists = allSeed()
local selectedSeeds = {}
plant:AddDropdown("seed_dropdown", {
    Values = seedLists,
    Text = "Seeds",
            selectedSeeds = {}
            for _, name in ipairs(seedLists) do
                    table.insert(selectedSeeds, name)
            selectedSeeds = rawSelected
        Library:Notify("Selected seeds: " .. table.concat(selectedSeeds, ", "))
local seedIndex = 1
            if #selectedSeeds == 0 then
                Library:Notify("No seeds selected!")
                    if hrp and #selectedSeeds > 0 then
                        local fullSeedName = selectedSeeds[seedIndex]
                        seedIndex += 1
                        if seedIndex > #selectedSeeds then
                            seedIndex = 1
                        local function findSeedTool(name)
                            for _, container in ipairs({backpack, character}) do
                        local tool = findSeedTool(fullSeedName)
                        if findSeedTool(fullSeedName) then
                            local cropName = fullSeedName:gsub(" Seed", "")
                                :FireServer(unpack(args))
    local function backPackCount()
        for _,t in ipairs(Players.LocalPlayer.Backpack:GetChildren()) do
            for _,it in ipairs(Players.LocalPlayer.Backpack:GetChildren()) do
    local function plantSeed(seed)
        local bp     = player:WaitForChild("Backpack")
        local lastProg, t0 = progress("Plant", seed)
        -- helper: locate the seed tool in backpack or character
                    if item:IsA("Tool") and item.Name:match("^" .. seed .. " Seed") then
                    Library:Notify("[AutoPlant] Missing \"" .. seed .. " Seed\" – equip / buy more to continue.", 4)
                    seed
            local prog, target = progress("Plant", seed)
        local bp         = player:WaitForChild("Backpack")
		for _, tool in ipairs(player.Backpack:GetChildren()) do
                            elseif q.Type == "Plant"         then task.spawn(plantSeed   , arg1)
        local shovel = backpack:FindFirstChild(shovelName)
                    for _,tool in ipairs(backpack:GetChildren()) do
                        for _, tool in ipairs(backpack:GetChildren()) do
                                            current.Parent = backpack
                    if targetPlayer and backpack then
                            for _, tool in ipairs(backpack:GetChildren()) do
                                            currentTool.Parent = backpack
	for _, tool in ipairs(player.Backpack:GetChildren()) do
		Library:Notify("🛠️ Trowel not found in backpack.")
local backpack = player:WaitForChild("Backpack")
    for _, tool in ipairs(backpack:GetChildren()) do
-- local seedPack = someObsidianTab -- Replace with your actual tab
-- Return sorted pack list
Remotes.SeedPack.Result.listen(function(data)
	Remotes.SeedPack.SpinFinished.send()
seedPack:AddDropdown("Select Seed Pack", {
	Text = "Seed Packs",
	Values = getSeedPacks(),
		local selectedPacks = keysOf(selected) 
seedPack:AddToggle("Auto Open Selected Pack", {
				if not busy and #selectedPacks > 0 then
					for _, pack in ipairs(selectedPacks) do
						Remotes.SeedPack.Open.send(pack)
