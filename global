for _, v in ipairs(game:GetService("CoreGui"):GetDescendants()) do
    if v:IsA("ScreenGui") and v.Name == "Obsidian" then
        v:Destroy()
		for _, v2 in ipairs(game:GetService("Players").LocalPlayer.PlayerGui:GetDescendants()) do
			if v2:isA("ScreenGui") and v2.Name == "GearTeleportGui" then
				v2:Destroy()
			end
 		end
    end
end

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/addons/SaveManager.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/yue-os/ObsidianUi/refs/heads/main/addons/ThemeManager.lua"))()
local Players = game.Players
local player = game.Players.LocalPlayer
local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local byte_net_reliable = ReplicatedStorage:WaitForChild("ByteNetReliable")
local autoSubmit = false
local fruitThreshold = 10
local autoSell = false
local highlightToggle = false
local currentHighlight = nil
local currentBillboard = nil
local lastBiggest = nil
local noclipEnabled = false
local speedwalkEnabled = false
local speedValue = 16
local noclipConn, speedConn
local savedPosition = nil
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
local ItemModule = require(ReplicatedStorage:WaitForChild("Item_Module"))
local MutationHandler = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("MutationHandler"))
local FormatWithCommas = require(ReplicatedStorage.Modules:WaitForChild("CommaFormatNumber"))
local PetEggService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetEggService")
local giftingService = require(ReplicatedStorage.Modules.PetServices.PetGiftingService)
local activePets = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
local petRegistry = require(ReplicatedStorage.Data.PetRegistry)
local PetEggs = petRegistry.PetEggs
local MIN_DISTANCE = petRegistry.PetConfig.PET_GIFTING_CONFIG.MINIMUM_DISTANCE_FOR_GIFTING
local hum = character:FindFirstChildOfClass("Humanoid")
local setclipboard = setclipboard or function(text)
    if syn then
        syn.write_clipboard(text)
    elseif clipboard_set then
        clipboard_set(text)
    else
        print("Clipboard not supported. Link: https://discord.gg/WswepWXvr9")
    end
end

setclipboard("https://discord.gg/WswepWXvr9")

                      :WaitForChild("Data")
                      :FindFirstChild("Owner")
    if owner and tostring(owner.Value) == tostring(player) then
        
        break
    end
end

local function getBaseName(itemName)
    local base = itemName:match("^(.-) %[[^%]]+%]$")
    return base or itemName
end

local inventory_enums = {
    ["OWNER"]             = "a",
    ["ITEM_TYPE"]         = "b",
    ["ITEM_UUID"]         = "c",
    ["Favorite"]          = "d",
    ["Uses"]              = "e",
    ["ItemName"]          = "f",
    ["Rarity"]            = "g",
    ["EggName"]           = "h",
    ["CrateType"]         = "i",
    ["PotType"]           = "j",
    ["LinkedPlayerID"]    = "k",
    ["SprayType"]         = "l",
    ["SprayMutationName"] = "m",
    ["Type"]              = "n"
}

local item_types = {
    ["Trowel"]            = "b",
    ["PetEgg"]            = "c",
    ["Sprinkler"]         = "d",
    ["Night Staff"]       = "e",
    ["Pollen Radar"]      = "g",
    ["Favorite Tool"]     = "h",
    ["Lightning Rod"]     = "i",
    ["Holdable"]          = "j",
    ["Star Caller"]       = "k",
    ["Pet"]               = "l",
    ["FriendshipPot"]     = "m",
    ["Watering Can"]      = "o",
    ["Nectar Staff"]      = "p",
    ["Recall Wrench"]     = "q",
    ["CosmeticCrate"]     = "r",
    ["SprayBottle"]       = "s"
}

local item_codes = {}
for k, v in pairs(item_types) do
	item_codes[v] = k
end


local function keysOf(dict)
    local list = {}
        return list
    end
    for k, v in pairs(dict) do
        if v then
        end
    end
    return list
end

local function getFruitCount()
    local count = 0
        if v:FindFirstChild("Weight") and v:FindFirstChild("Variant") then
            count = count + 1
        end
    end
    return count
end

local function removeHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
    if currentBillboard then
        currentBillboard:Destroy()
        currentBillboard = nil
    end
end

	end
end

local function CalculatePlantValue(plant)
	local itemString = plant:FindFirstChild("Item_String")
	local itemName = itemString and itemString.Value or plant.Name

	local variant = plant:FindFirstChild("Variant")
	if not variant then return 0 end

	local weight = plant:FindFirstChild("Weight")
	if not weight then return 0 end

	local baseData = ItemModule.Return_Data(itemName)
	if not baseData or #baseData < 3 then
		warn("Invalid ItemData for:", itemName)
		return 0
	end

	local variantMultiplier = ItemModule.Return_Multiplier(variant.Value)
	local valueMulti = MutationHandler:CalcValueMulti(plant)
	local clamp = math.clamp(weight.Value / baseData[2], 0.95, 1e8)

	return math.round(baseData[3] * valueMulti * variantMultiplier * (clamp * clamp))
end

local function highlightBiggestFruit()
		local important = f:FindFirstChild("Important")
		local data = important and important:FindFirstChild("Data")
		local owner = data and data:FindFirstChild("Owner")
		if owner and owner.Value == player.Name then
			break
		end
	end
		removeHighlight()
		lastBiggest = nil
		return
	end

	if not plants then
		removeHighlight()
		lastBiggest = nil
		return
	end

	local biggest, maxWeight = nil, -math.huge
	for _, plant in ipairs(plants:GetChildren()) do
        local fruitsFolder = plant:FindFirstChild("Fruits")
        if fruitsFolder then
            for _, fruit in ipairs(fruitsFolder:GetChildren()) do
                local weightObj = fruit:FindFirstChild("Weight")
                if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
                    biggest = fruit
                    maxWeight = tonumber(weightObj.Value)
                end
            end
        else
            local weightObj = plant:FindFirstChild("Weight")
            if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
                    biggest = plant
                    maxWeight = tonumber(weightObj.Value)
                end
        end
    end


	if biggest ~= lastBiggest then
		removeHighlight()
		lastBiggest = biggest
		if biggest and biggest:IsA("Model") then
			
			local highlight = Instance.new("Highlight")
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.Adornee = biggest
            highlight.Parent = biggest
            currentHighlight = highlight

            -- Disconnect old rainbow connection if it exists
            if rainbowConnection then
                rainbowConnection:Disconnect()
            end

            -- Start rainbow animation
            rainbowConnection = RunService.RenderStepped:Connect(function()
                local hue = (tick() * 0.5) % 1 -- adjust speed here
                local color = Color3.fromHSV(hue, 1, 1)
                if currentHighlight then
                    currentHighlight.FillColor = color
                    currentHighlight.OutlineColor = color:lerp(Color3.new(1, 1, 1), 0.2) -- make outline slightly brighter
                end
            end)


			local head = biggest:FindFirstChildWhichIsA("BasePart")
			if head then
				local value = CalculatePlantValue(biggest)

				local bb = Instance.new("BillboardGui")
				bb.Size = UDim2.new(0, 160, 0, 60)
				bb.AlwaysOnTop = true
				bb.StudsOffset = Vector3.new(0, 3, 0)
				bb.Adornee = head
				bb.Parent = head

				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(255, 255, 255) -- fallback
                label.TextStrokeTransparency = 0.2
                label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                label.TextScaled = true
                label.Font = Enum.Font.FredokaOne
                label.RichText = true
                label.Text = string.format(
                    "<font color='rgb(255,255,255)'>Weight: %.2fkg</font>\n<font color='rgb(255,200,0)'>Value: %s Â¢</font>",
                    maxWeight,
                    FormatWithCommas(value)
                )
				label.Parent = bb
				currentBillboard = bb
			end
		end
	end
end

local function savePosition()
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if hrp then
		savedPosition = hrp.CFrame
	else
	end
end

local function sellInventory()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
end

local function cleanPlantName(name)
	name = name:gsub("%s*%b[]", "") -- remove anything in brackets
	return name:match("^%s*(.-)%s*$") -- trim spaces
end

local function allPlants()

        end
    end

end


local function teleportSellReturn()
    savePosition()
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
    task.wait(0.25)
    sellInventory()
    task.wait(0.2)
    hrp.CFrame = cFrame
end

local function parseCompactTime(str)
    if not str or str == "" then return 0 end
    local mins = tonumber(str:match("(%d+)%s*Minute")) or 0
    local secs = tonumber(str:match("(%d+)%s*Second")) or 0
    return mins * 60 + secs
end




            if mainFrame then
                    
                    local cleaned = rawName:gsub("%s*[sS]eed%s*", ""):gsub("^%s*(.-)%s*$", "%1")
                end
            end
        end
    end
end

local function getMerchantShop()
    local merchantTbl = require(ReplicatedStorage.Data.TravelingMerchant.TravelingMerchantData)

    local result = { "All" }
    local seen   = {}

    for _, merchantInfo in pairs(merchantTbl) do
        local shopData = merchantInfo.ShopData
        if typeof(shopData) == "Instance" and shopData:IsA("ModuleScript") then
            shopData = require(shopData)
        end
            for rawName, entry in pairs(shopData) do
                if not seen[name] then
                    seen[name] = true
                end
            end
        end
    end

        if a == "All" then return true  end
        if b == "All" then return false end
        return a < b
    end)

    return result
end

local function getGearShop()
    local gearShopGui = playerGui:WaitForChild("Gear_Shop")
    local gearsFrame = gearShopGui:WaitForChild("Frame"):WaitForChild("ScrollingFrame")

    local gearList = {}


    for _, gearFrame in pairs(gearsFrame:GetChildren()) do
        if gearFrame:IsA("Frame") then
            local mainFrame = gearFrame:FindFirstChild("Main_Frame")
            if mainFrame then
                local gearText = mainFrame:FindFirstChild("Gear_Text")
                if gearText and gearText:IsA("TextLabel") then
                end
            end
        end
    end

    return gearList
end


local function getallegg()
    local eggpath = game:GetService("ReplicatedStorage").Assets.Models.EggModels
    local egglist = {}
    for _, egg in pairs(eggpath:GetChildren()) do
        local eggName = egg.Name
    end
    return egglist
end

task.wait(1)

local p = game:GetService("Players").LocalPlayer
local g = p.PlayerGui.Teleport_UI.Frame
local gear = g:WaitForChild("Gear")

local gui = Instance.new("ScreenGui")
gui.Name = "GearTeleportGui"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = g

local btn = Instance.new("ImageButton")
btn.Name = "GearButton"
btn.Size = UDim2.new(0, 95, 0, 35)
btn.AnchorPoint = Vector2.new(0.5, 1)
btn.BackgroundColor3 = Color3.fromRGB(97, 226, 51)
btn.BorderColor3 = Color3.new(0,0,0)
btn.BorderMode = "Outline"
btn.BorderSizePixel = 1
btn.LayoutOrder = -5
btn.Image = ""
btn.ZIndex = 100
btn.Parent = gui

local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, 0, 1, 0)
label.BackgroundTransparency = 1
label.Text = "Gear"
label.TextColor3 = Color3.new(1, 1, 1)
label.TextStrokeTransparency = 0.5
label.Font = Enum.Font.GothamBold
label.TextScaled = true
label.ZIndex = 101
label.Parent = btn

game:GetService("RunService").RenderStepped:Connect(function()
	local pos = gear.AbsolutePosition
	local size = gear.AbsoluteSize
	btn.Position = UDim2.fromOffset(pos.X + size.X/3, pos.Y + size.Y + 73)
	-- btn.Position = UDim2.new(0.688038409, 0, 0.114772804, 0)
end)

btn.MouseButton1Click:Connect(function()
	local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.CFrame = CFrame.new(-285.41, 3.00, -13.98)
	end
end)


-- local gear = g:WaitForChild("Gear")

-- local gui = Instance.new("ScreenGui")
-- gui.ResetOnSpawn = false
-- gui.IgnoreGuiInset = true
-- gui.Parent = g

-- local btn = Instance.new("ImageButton")
-- btn.Size = UDim2.new(0, 95, 0, 35)
-- btn.AnchorPoint = Vector2.new(0.5, 1)
-- btn.BackgroundColor3 = Color3.fromRGB(97, 226, 51)
-- btn.BorderColor3 = Color3.new(0,0,0)
-- btn.BorderMode = "Outline"
-- btn.BorderSizePixel = 1
-- btn.LayoutOrder = -5
-- btn.Image = ""
-- btn.ZIndex = 100
-- btn.Parent = gui

-- local label = Instance.new("TextLabel")
-- label.Size = UDim2.new(1, 0, 1, 0)
-- label.BackgroundTransparency = 1
-- label.Text = "Gear"
-- label.TextColor3 = Color3.new(1, 1, 1)
-- label.TextStrokeTransparency = 0.5
-- label.Font = Enum.Font.GothamBold
-- label.TextScaled = true
-- label.ZIndex = 101
-- label.Parent = btn

-- game:GetService("RunService").RenderStepped:Connect(function()
-- 	local pos = gear.AbsolutePosition
-- 	local size = gear.AbsoluteSize
-- 	btn.Position = UDim2.fromOffset(pos.X + size.X/3, pos.Y + size.Y + 73)
-- 	-- btn.Position = UDim2.new(0.688038409, 0, 0.114772804, 0)
-- end)

-- btn.MouseButton1Click:Connect(function()
-- 	local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
-- 	if hrp then
-- 		hrp.CFrame = CFrame.new(-285.41, 3.00, -13.98)
-- 	end
-- end)

    Title = "Y-Hub",
    Center = true,
    Icon = 128171209017859,
    AutoShow = true,
    Size = UDim2.fromOffset(650, 460),
    ShowCustomCursor = false,
    ToggleKeybind = Enum.KeyCode.LeftControl
})


local setting = {
}


group:AddInput("fruit_input", {
    Text = "Fruit Threshold",
    Default = "10",
    Numeric = true, -- optional: restrict to numeric input only
    Callback = function(val)
        fruitThreshold = tonumber(val) or 0
    end
})

group:AddToggle("auto_sell_toggle", {
    Text = "Auto Sell",
    Default = false,
    Callback = function(state)
        autoSell = state
        if autoSell then
            task.spawn(function()
                    if getFruitCount() >= fruitThreshold then
                        teleportSellReturn()
                        task.wait(2)
                    end
                    task.wait(1)
                end
            end)
        else
        end
    end
})

group:AddToggle("highlight_biggest_toggle", {
    Text = "Show Biggest",
    Tooltip = "ESP biggest fruit with weight and value Â¢",
    Default = false,
    Callback = function(state)
        highlightToggle = state
        if highlightToggle then
            highlightBiggestFruit()
            conn = RunService.RenderStepped:Connect(function()
                if highlightToggle then
                    highlightBiggestFruit()
                end
            end)
        else
            if conn then conn:Disconnect() end
            removeHighlight()
            lastBiggest = nil
        end
    end
})

lPlayer:AddToggle("noclip_toggle", {
    Text = "Noclip",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if noclipEnabled then
            noclipConn = RunService.Stepped:Connect(function()
                local char = player.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConn then noclipConn:Disconnect() noclipConn = nil end
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

lPlayer:AddSlider("speed_slider", {
    Text = "Speed",
    Min = 16,
    Max = 100,
    Default = 16,
    Rounding = 0,
    Callback = function(val)
        speedValue = val
        if speedwalkEnabled then
            local char = player.Character or player.CharacterAdded:Wait()
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.WalkSpeed = speedValue
            end
        end
    end
})

lPlayer:AddToggle("speedwalk_toggle", {
    Text = "Speedwalk",
    Default = false,
    Callback = function(state)
        speedwalkEnabled = state
        local char = player.Character or player.CharacterAdded:Wait()
        if speedwalkEnabled and hum then
            hum.WalkSpeed = speedValue
            speedConn = char.ChildAdded:Connect(function(child)
                if child:IsA("Humanoid") then
                    child.WalkSpeed = speedValue
                end
            end)
        else
            if hum then hum.WalkSpeed = 16 end
            if speedConn then speedConn:Disconnect() speedConn = nil end
        end
    end
})

    Multi = true,
    Searchable = true,
    Default = {},               
    Callback = function(selected)
        local rawSelected = keysOf(selected)

        
                if name ~= "All" then
                end
            end
        else
        end

    end
})

    Text = "Auto Buy",
    Default = false,
    Callback = function(value)
            task.spawn(function()

                        end
                    end
                    task.wait(0.5)
                end
            end)
        else
        end
    end
})

trowel:AddButton("Save Position", savePosition)
trowel:AddButton("Reset Saved Position", function()
	savedPosition = nil
end)

group:AddButton("Sell Inventory", teleportSellReturn)

local egglist = getallegg()
local selectedeggs = {}
hatch:AddDropdown("egg_dropdown", {
    Text = "Eggs",
    Default = {},
    Values = egglist,
    Multi = true,
    Searchable = true,
    Callback = function(selected)
        local eggselected = keysOf(selected)

            selectedeggs = {}
            for _, name in ipairs(egglist) do
                if name ~= "All" then
                end
            end
        else
            selectedeggs = eggselected
        end

    end
})

local function hatchSelectedEggs()
    for _, egg in ipairs(workspace:GetDescendants()) do
        if egg:IsA("Model") and egg:GetAttribute("OWNER") == player.Name and egg:GetAttribute("READY") then
            local eggName = egg:GetAttribute("EggName")
                PetEggService:FireServer("HatchPet", egg)
                task.wait(0.1)
            end
        end
    end
end


function get_tool()
    return player.Character:FindFirstChildOfClass("Tool")
end

local place_egg_method = ""

local placingEggs = false

-- local minToPlace = 3
-- hatch:AddInput("amountoplace", {
--     Text = "Your max egg slot available",
--     Placeholder = "Default is 3",
--     Callback = function(value)
--         minToPlace = tonumber(value)
--     end
-- })
------------------------------------------------------------------
--  ð£  AUTO-PLACE EGGS
------------------------------------------------------------------
local EggRE          = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService")        -- "CreateEgg" remote
local shovelName     = "Shovel [Destroy Plants]"                          -- only needed for equip helper
local auto_place_eggs, placingEggs = false, false

------------------------------------------------------------------ helpers
local function equipTool(tool)
    local char     = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid or not tool then return false end

    -- already holding?
    if char:FindFirstChild(tool.Name) == tool then return true end

    humanoid:UnequipTools()
    humanoid:EquipTool(tool)

    -- wait up to Â½ s for server replication
    for i = 1, 10 do
        if char:FindFirstChild(tool.Name) then return true end
        task.wait(0.05)
    end
    return false
end

local vcreate = vector.create   -- keep the call short

--------------------------------------------------------------
-- random position inside the Can_Plant part
--------------------------------------------------------------
local function nextRandomPos()
    local canPlant = plant_locations:FindFirstChild("Can_Plant")
    if not (canPlant and canPlant:IsA("BasePart")) then
        return nil
    end

    -- uniform rectangle sampling
    local halfX, halfZ = canPlant.Size.X * 0.5, canPlant.Size.Z * 0.5
    local dx = (math.random() * 2 - 1) * halfX      --  â [-halfX â¦ +halfX]
    local dz = (math.random() * 2 - 1) * halfZ

    return vcreate(canPlant.Position.X + dx,
                   canPlant.Position.Y + 0.1,   -- 1 stud above ground
                   canPlant.Position.Z + dz)
end

local autoPlaceEggs = false



hatch:AddToggle("auto_place_eggs", {
  Text    = "Auto Place Eggs",
  Default = false,
  Callback = function(val)
    autoPlaceEggs = val
  end
})

-- persistent place-eggs loop
task.spawn(function()
    if autoPlaceEggs then
      ----------------------------------------------------------
      -- any pre-checks (method selected, position saved, eggs chosen)
      ----------------------------------------------------------
      if place_egg_method == "" then
      elseif place_egg_method == "Selected Position" and not selected_position_egg then
      elseif #selectedeggs == 0 then
      else
        ----------------------------------------------------------
        -- your existing âwhile garden has room, loop through eggsâ logic
        ----------------------------------------------------------
		local data = require(ReplicatedStorage.Modules.DataService):GetData()
		local totalEgg = data.PetsData.PurchasedEggSlots + 3
        local gardenHasRoom = #object_physical:GetChildren() < totalEgg
        if gardenHasRoom then
            if not autoPlaceEggs then break end
            if tool:IsA("Tool")
				and tool:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.PetEgg
            then
              if not equipTool(tool) then 
				-- print("NO: ", selectedeggs)
				break 
			end

              local uses = tool:GetAttribute(inventory_enums.Uses) or 1
              for i = 1, uses do
                if not autoPlaceEggs then break end

                local pos
				if place_egg_method == "Random Place Position" then
					pos = nextRandomPos()
				elseif place_egg_method == "Player Position" then
					pos = player.Character:GetPivot().Position
				else
					pos = selected_position_egg
				end
				if not pos then break end

                EggRE:FireServer("CreateEgg", pos)
                task.wait(0.25)
				
                if #object_physical:GetChildren() > totalEgg then
                  break
                end
              end

              player.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
              if #object_physical:GetChildren() > totalEgg then
                break
              end
            end
          end
        end
      end
    end

    task.wait( autoPlaceEggs and 0.5 or 1 )
  end
end)


local setPositionButton -- define ahead so we can reuse
hatch:AddDropdown('place_egg_method', {
    Values = { 'Player Position', 'Selected Position', 'Random Place Position' },
    Default = place_egg_method,
    Multi = false,
    Text = 'Select Auto Place Egg Method:',
    Tooltip = 'Auto places eggs with selected method',
    Callback = function(Value)
        place_egg_method = Value

        if setPositionButton then
            setPositionButton:SetVisible(Value == "Selected Position")
        end
    end
})

setPositionButton = hatch:AddButton({
    Text = 'Set Position',
    Func = function()
        if player.Character then
            selected_position_egg = player.Character:GetPivot().Position
        else
        end
    end,
    DoubleClick = false,
    Tooltip = 'Sets player position to use for auto place eggs'
})

-- Hide initially if default is not "Selected Position"
if place_egg_method ~= "Selected Position" then
    setPositionButton:SetVisible(false)
end

local autoHatch = false

hatch:AddToggle("autohatchtoggle", {
  Text    = "Auto Hatch",
  Default = false,
  Callback = function(state)
    autoHatch = state
  end
})

-- persistent hatch loop
task.spawn(function()
    if autoHatch then
      hatchSelectedEggs()
    end
    task.wait(1)  -- run every second (tweak as you like)
  end
end)

    local interactionFolder = workspace:WaitForChild("Interaction")
    local updateItems = interactionFolder:WaitForChild("UpdateItems")
    local dinoEvent = updateItems:WaitForChild("DinoEvent")

    local remote = game:GetService("ReplicatedStorage")
        :WaitForChild("GameEvents")

end

local dlist = {
    "Dino Crate",
    "Mutation Spray Amber"
}
if #dlist == 0 then
end


dino:AddDropdown("dino_dropdown", {
    Values = dlist,
    Searchable = true,
    Default = nil,
    Callback = function(selected)
        if selected then
        else
        end
    end
})


    Default = false,
    Callback = function(val)
    end
})

task.spawn(function()
            pcall(function()
            end)
        end
    end
end)


		{ name = "Dinosaur Egg", itemType = "PetEgg", slot = 1 }
	},
	["Dino Crate"] = {
		{ name = "Dinosaur Egg", itemType = "PetEgg", slot = 1 }
	},
	["Mutation Spray Amber"] = {
		{ name = "Cleaning Spray", itemType = "SprayBottle", slot = 1 },
		{ name = "Dinosaur Egg", itemType = "PetEgg", slot = 2 }
	}
}


-- ð§¬ ItemType Enum
local ItemTypeEnum = {
	["Trowel"] = "b",
	["PetEgg"] = "c", -- Used for Dinosaur Egg
	["Sprinkler"] = "d",
	["Night Staff"] = "e",
	["Pollen Radar"] = "g",
	["Favorite Tool"] = "h",
	["Lightning Rod"] = "i",
	["Holdable"] = "j",
	["Star Caller"] = "k",
	["Pet"] = "l",
	["FriendshipPot"] = "m",
	["Watering Can"] = "o",
	["Nectar Staff"] = "p",
	["Recall Wrench"] = "q",
	["CosmeticCrate"] = "r",
	["SprayBottle"] = "s"
}

-- ð Submission Logic
local function findAndSubmit(toolMatchName, itemTypeKey, slot)
	local itemType = ItemTypeEnum[itemTypeKey]
	if not itemType then
		warn("â Invalid ItemType: " .. tostring(itemTypeKey))
		return false
	end

		if tool:IsA("Tool") and tool.Name:find(toolMatchName) then
            -- print(tool.Name)
			local uuid = tool:GetAttribute("c") or tool:GetAttribute("UUID")
			if uuid then
				tool.Parent = character
				task.wait(0.2)

					ItemType = itemTypeKey,
					ItemData = { UUID = uuid }
				})
				return true
			end
		end
	end
	return false
end

local function submitValidItems()


	for _, requirement in ipairs(requiredItems) do
		findAndSubmit(requirement.name, requirement.itemType, requirement.slot)
	end

	hum:UnequipTools()
end


-- ð Toggle UI
dino:AddToggle("autosubmit_dino", {
	Text = "Auto Submit Dino Items",
	Default = false,
	Callback = function(v)
		autoSubmit = v
	end
})

		:WaitForChild("UpdateItems")
		:WaitForChild("DinoEvent")

		if descendant:IsA("TextLabel") and descendant.Name == "TextLabel" then
			local parentGui = descendant.Parent

				return descendant
			end
		end
	end

	return nil
end

task.spawn(function()
        if autoSubmit then
            pcall(submitValidItems)
        end
		task.wait(3)
	end
end)


    Text = "Auto Start",
    Default = false,
    Callback = function(state)
        autoSubmit = state
        if autoSubmit then
        end
    end
})
-- â¶ï¸ Toggle only flips the flag
    Default = false,
    Callback = function(state)
    end
})

-- â¶ï¸ Single background task that always runs
task.spawn(function()
                "DinoEventWorkbench",
                1
            )
        end
        task.wait(5)
    end
end)




local merchlist = getMerchantShop()
local selectedMerchantItem = {}
merchantShop:AddDropdown("merch_dropdown", {
    Values = merchlist,
    Multi = true,
    Searchable = true,
    Text = "Merchant Items Available",
    Default = {},
    Callback = function(selected)
        local merchselected = keysOf(selected)

        
            selectedMerchantItem = {}
            for _, name in ipairs(merchlist) do
                if name ~= "All" then
                end
            end
        else
            selectedMerchantItem = merchselected
        end

    end
})



local autoBuyMerch = false
merchantShop:AddToggle("auto_buy_selected_merch", {
    Text = "Auto Buy",
    Default = false,
    Callback = function(value)
        autoBuyMerch = value
        if autoBuyMerch then
            task.spawn(function()
                local event = game:GetService("ReplicatedStorage").GameEvents:WaitForChild("BuyTravelingMerchantShopStock")

                    if #selectedMerchantItem > 0 then
                        local toBuy = {}

                            
                            for _, merchName in ipairs(merchlist) do
                                if merchName ~= "All" then
                                end
                            end
                        else
                            toBuy = selectedMerchantItem
                        end

                        
                        for _, merchName in ipairs(toBuy) do
                            event:FireServer(merchName)
                        end
                    end
                    task.wait(0.5)
                end
            end)
        else
        end
    end
})

local gearList = getGearShop()
local selectedGears = {}
gearShop:AddDropdown("gear_dropdown", {
    Values = gearList,
    Multi = true,
    Searchable = true,
    Text = "Gears Available",
    Default = {},
    Callback = function(selected)
        local rawSelectedd = keysOf(selected)

        
            selectedGears = {}
            for _, name in ipairs(gearList) do
                if name ~= "All" then
                end
            end
        else
            selectedGears = rawSelectedd
        end

    end
})

local autoBuyGears = false
gearShop:AddToggle("auto_buy_selected_gears", {
    Text = "Auto Buy",
    Default = false,
    Callback = function(value)
        autoBuyGears = value
        if autoBuyGears then
            task.spawn(function()
                local event = game:GetService("ReplicatedStorage").GameEvents:WaitForChild("BuyGearStock")

                    if #selectedGears > 0 then
                        local toBuy = {}

                            
                            for _, gearName in ipairs(gearList) do
                                if gearName ~= "All" then
                                end
                            end
                        else
                            toBuy = selectedGears
                        end

                        
                        for _, gearName in ipairs(toBuy) do
                            event:FireServer(gearName)
                        end
                    end
                    task.wait(0.5)
                end
            end)
        else
        end
    end
})


-- local autoBuyPetsToggle = false
-- petGroup:AddToggle("auto_buy_pets_toggle", {
--     Text = "Auto Buy All Eggs",
--     Default = false,
--     Callback = function(val)
--         autoBuyPetsToggle = val
--         if val then
--             task.spawn(function()
--                     for i = 1, 3 do
--                         for _, pet in ipairs({1, 2, 3}) do
--                             ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(pet)
--                             task.wait()
--                         end
--                     end
--                     task.wait(60)
--                 end
--             end)
--         else
--         end
--     end
-- })

-- local rs            = game.ReplicatedStorage
-- local egg_data      = require(rs.Data.PetEggData)
-- local selected_eggs = { "All" }

-- local function get_shop_eggs()
--     local eggs = { "All" }
--     for _, info in pairs(egg_data) do
--     end
--     return eggs
-- end


local eggData = require(game:GetService("ReplicatedStorage").Data.PetEggData) -- add require
local function getShopEggs()
	local eggs = {"All"} -- don't reuse the global 'egg' name
	for _, v in pairs(eggData) do
	end
	return eggs
end

local eggs = getShopEggs()

petGroup:AddDropdown("eggsd", {
	Text       = "Egg List",
	Default    = selected_eggs,
	Values     = eggs,
	Multi      = true,
	Searchable = true,
	Callback   = function(sel)
		selected_eggs = keysOf(sel) 
	end
})

petGroup:AddToggle("auto_buy_egg", {
	Text = "Auto Buy",
	Default = false,
	Callback = function(state)
		autoBuyPets = state

		if autoBuyPets then
			task.spawn(function()
					local targets = selected_eggs
					if not targets or #targets == 0 then
						targets = {"All"} -- fallback if empty
					end

						-- print("ð§ª Buying all eggs...")
						for _, data in pairs(eggData) do
							local eggName = data.EggName
							print("ð£ Buying:", eggName)
							pcall(function()
								ReplicatedStorage.GameEvents:WaitForChild("BuyPetEgg"):FireServer(eggName)
							end)
							task.wait(0.5)
						end
					else
						-- print("ð§ª Buying selected eggs...")
						for _, eggName in ipairs(targets) do
							print("ð£ Buying:", eggName)
							pcall(function()
								ReplicatedStorage.GameEvents:WaitForChild("BuyPetEgg"):FireServer(eggName)
							end)
							task.wait(0.5)
						end
					end

					task.wait(1) -- cooldown
				end
			end)
		else
		end
	end
})


local cosmeticUI = rShop:AddToggle("cosmetic_toggle", {
    Text = "Cosmetic Shop",
    Default = false,
    Callback = function(state)
        cosmeticToggle = state
        local ui = player.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

    Default = false,
    Callback = function(state)
        cosmeticToggle = state
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

cosmeticUI:AddKeyPicker("cosmetic_keybind", {
    Text = "Cosmetic Shop",
    Default = "R",
    Mode = "Toggle",
    Callback = function(state)
        cosmeticPicker = state
        local ui = player.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

local gearShop = rShop:AddToggle("gear_toggle", {
    Text = "Gear Shop",
    Default = false,
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

gearShop:AddKeyPicker("gear_keybind", {
    Text = "Gear Shop",
    Default = "G",
    Mode = "Toggle",
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

    Default = false,
    Callback = function(state)
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

    Default = "T",
    Mode = "Toggle",
    Callback = function(state)
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})

    Default = false,
    Callback = function(state)
        local ui = player.PlayerGui:FindFirstChild("EventShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
        end
    end
})
--     Default = "C",
--     Mode = "Toggle",
--     Callback = function(state)
--         local ui = player.PlayerGui:FindFirstChild("EventShop_UI")
--         if ui then
--             ui.Enabled = not ui.Enabled
--         end
--     end
-- })


    if ui then
        ui.Enabled = not ui.Enabled
    end
end)

player.Idled:Connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

local minWeight, maxWeight = 0, 9999


local allPlant = allPlants()
-- Dropdown handler
group2:AddDropdown("plant_dropdown", {
	Text = "Plant List",
	Values = allPlant,
	Multi = true,
	Searchable = true,
	Callback = function(values)
		selectedPlants = keysOf(values)
	end
})

--     Text = "Fruit Names (Leave blank if all)",
--     Default = "",
--     Tooltip = "Use comma(,) to seperate fruits",
--     Callback = function(val)
--         for fruit in string.gmatch(val, "([^,]+)") do
--             fruit = fruit:match("^%s*(.-)%s*$") 
--             if fruit ~= "" then
--             end
--         end
--     end
-- })

group2:AddInput("min_weight_input", {
    Text = "Min Weight (kg)",
    Default = "0",
    Callback = function(val)
        minWeight = tonumber(val) or 0
    end
})

group2:AddInput("max_weight_input", {
    Text = "Max Weight (kg)",
    Default = "9999",
    Callback = function(val)
        maxWeight = tonumber(val) or 9999
    end
})

    if not item then return false end
    local weightObj = item:FindFirstChild("Weight")
    if not weightObj then return false end
    local weight = tonumber(weightObj.Value)
    if not weight then return false end

    local baseName = getBaseName(item.Name)

    if #selectedPlants == 0 then
        return weight >= minW and weight <= maxW
    end

end


local autoCollect = false
group2:AddToggle("auto_collect_toggle", {
    Text = "Auto Collect",
    Default = false,
    Callback = function(state)
        autoCollect = state
        if autoCollect then
            task.spawn(function()
                    
                    local buffer = buffer.fromstring("\1\1\0\1")

                        
                            byte_net_reliable:FireServer(buffer, { v })
                        end
                        if v:FindFirstChild("Fruits", true) then
                            if not autoCollect then break end
                            for _, i in next, v.Fruits:GetChildren() do
                                    byte_net_reliable:FireServer(buffer, { i })
                                end
                            end
                            task.wait(0.2)
                        end
                    end
                    task.wait(2)
                end
            end)
        else
        end
    end
})

local module = require(game:GetService("ReplicatedStorage").Modules.PlantTraitsData)
local summerPlants = module.Summer

local targetFruits = {}
for plant, _ in pairs(summerPlants) do
    targetFruits[plant] = true
end

local function isTargetFruit(item)
    if not item then return false end
    local baseName = item.Name:match("^(.-) %[[^%]]+%]$") or item.Name
    return targetFruits[baseName] == true
end


local infiniteJump = false

lPlayer:AddToggle("infinite_jump_toggle", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(enabled)
        infiniteJump = enabled
    end
})

    if infiniteJump then
        local character = player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)


creditsGroup:AddButton({
    Text = "Join Discord Server",
    Func = function()
        setclipboard("https://discord.gg/WswepWXvr9")
        pcall(function()
            else
                game:HttpGet("https://discord.gg/WswepWXvr9")
            end
        end)
    end
})


    end
end


    Multi = true,
    Searchable = true,
    Default = {},               
    Callback = function(selected)
        local rawSelected = keysOf(selected)

        
                if name ~= "All" then
                end
            end
        else
        end

    end
})

local autoPlant = false
plant:AddToggle("auto_plant_toggle", {
    Text = "Auto Plant",
    Tooltip = "Stand at the place where you want to auto plant.",
    Default = false,
    Callback = function(state)
        autoPlant = state
        if autoPlant then
                autoPlant = false
                return
            end

            task.spawn(function()
                    local hrp = character:FindFirstChild("HumanoidRootPart")

                        end

                        
                                for _, item in ipairs(container:GetChildren()) do
                                    if item:IsA("Tool") and item.Name:match("^" .. name) then
                                        return item
                                    end
                                end
                            end
                            return nil
                        end


                        if tool and tool.Parent ~= character then
                            tool.Parent = character
                            task.wait(0.3)
                        end

                        
                            local pos = hrp.Position
                            local args = {
                                vector.create(pos.X, pos.Y, pos.Z),
                                cropName
                            }

                            game:GetService("ReplicatedStorage")
                                :WaitForChild("GameEvents")
                                :WaitForChild("Plant_RE")
                        end
                    end

                    task.wait(0.1)
                end
            end)
        else
        end
    end
})


-----------------------------------------------------------------
--  EQUIP TOOL RELIABLY
-----------------------------------------------------------------
local function equip_tool_reliable(tool)
    for _ = 1, 15 do
        local char = player.Character or player.CharacterAdded:Wait()
        local hum  = char:FindFirstChildOfClass("Humanoid")
        if tool.Parent == char then
            return true
        end
        hum:EquipTool(tool)
        task.wait(0.1)
    end
    return false
end

------------------------------------------------------------------
--        the current one shows no progress for STALL_TIME seconds
------------------------------------------------------------------
do
    --------------------------------------------------------------
    -- fast handles
    --------------------------------------------------------------
    local DataService    = require(ReplicatedStorage.Modules.DataService)

    local buffer   = buffer.fromstring("\1\1\0\1")
    local PetsRE   = ReplicatedStorage.GameEvents.PetsService


    -------------------------------------------------------------- tiny helpers
    local function goal(q)
        return q.Required or q.Amount or q.Target
               or ((q.Arguments or q.Args or {})[#(q.Arguments or q.Args or {})]) or 1
    end
    local function progress(kind, key)
            if (cont.Name or cont.Container or cont.Type or ""):lower() == "dino" then
                    if q.Type == kind and (q.Arguments or q.Args or {})[1] == key then
                        return q.Progress or 0, goal(q)
                    end
                end
            end
        end
        return 0, 1
    end
        local n = 0
            if t:FindFirstChild("Weight") and t:FindFirstChild("Variant") then n += 1 end
        end
        return n
    end


    --------------------------------------------------------------
    --------------------------------------------------------------
        local t0 = os.clock()

        local function bagCnt() local n=0
                if it:FindFirstChild("Weight") and it:FindFirstChild("Variant") then n+=1 end
            end; return n
        end


            -- one sweep
            if pf then
                for _,pl in ipairs(pf:GetChildren()) do
                    if (pl.Name:match("^(.-) %[[^%]]+%]$") or pl.Name)==crop then
                        byte_net_reliable:FireServer(buffer,{pl})
                        local fr = pl:FindFirstChild("Fruits")
                        if fr then for _,f in ipairs(fr:GetChildren()) do byte_net_reliable:FireServer(buffer,{f}) end end
                    end
                end
            end

            -- progress check / stall logic
            if prog>=target then break end
            if prog>lastProg then lastProg,t0 = prog,os.clock() end      -- reset stall timer
            if os.clock()-t0>STALL_TIME then break end                  -- ð´ stalled
            task.wait(1.5)
        end
    end

    local plantPos = nil            -- Vector3 | nil

    dino:AddButton("Save Position", function()
        local char = Players.LocalPlayer.Character
        local hrp  = char and char:FindFirstChild("HumanoidRootPart")
        if hrp then
            plantPos = hrp.Position
                ("[AutoPlant] Position saved  (%.1f, %.1f, %.1f)")
                :format(plantPos.X, plantPos.Y, plantPos.Z)
            )
        else
        end
    end)

    ------------------------------------------------------------------
    -- ð±  PLANT worker  (fixed position + âmissing-toolâ notification)
    ------------------------------------------------------------------
    local planting = false

        if not plantPos then
            return
        end

        planting = true
        local player = Players.LocalPlayer
        local char   = player.Character or player.CharacterAdded:Wait()

        local warnedMissing = false             -- so we donât spam

        local function findTool()
            for _, container in ipairs({ bp, char }) do
                for _, item in ipairs(container:GetChildren()) do
                        return item
                    end
                end
            end
        end

            local tool = findTool()

            ------------------------------------------------------------------
            -- notify if missing / clear notice if it re-appears
            ------------------------------------------------------------------
            if not tool then
                if not warnedMissing then
                    warnedMissing = true
                end
            else
                if warnedMissing then warnedMissing = false end   -- reset flag

                -- make sure tool is equipped to character
                if tool.Parent ~= char then
                    tool.Parent = char
                    task.wait(0.05)         -- let server see it
                end

                -- fire Plant_RE at saved position
                ReplicatedStorage.GameEvents.Plant_RE:FireServer(
                    vector.create(plantPos.X, plantPos.Y, plantPos.Z),
                )
            end

            ------------------------------------------------------------------
            -- stall / completion logic
            ------------------------------------------------------------------
            if prog >= target then break end
            if prog > lastProg then lastProg, t0 = prog, os.clock() end
            if os.clock() - t0 > STALL_TIME then break end

            task.wait(0.15)
        end

        planting = false
    end


    --------------------------------------------------------------
    -- GROW-PET-TO-AGE  (stall aware)
    --------------------------------------------------------------
    local growing = false
    local function growPet(pname)
        if growing then return end
        growing = true

        local PetsRE     = ReplicatedStorage.GameEvents.PetsService
        local player     = Players.LocalPlayer
        local char       = player.Character or player.CharacterAdded:Wait()
        local lastProg, t0 = progress("GrowPetToAge", pname)

        local function unequipOthers()
            for _, mdl in ipairs(workspace:GetDescendants()) do
                if mdl:IsA("Model") and mdl:GetAttribute("OWNER") == player.Name then
                    local n = mdl:GetAttribute("PetName") or mdl.Name
                    if n ~= pname then
                        local uuid = mdl:GetAttribute("PET_UUID") or mdl:GetAttribute("c")
                        if uuid then
                            PetsRE:FireServer("UnequipPet", uuid)
                        end
                    end
                end
            end
        end

        local function equipOne()
            for _, tool in ipairs(bp:GetChildren()) do
                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                    local base = tool.Name:match("^(.-)%s*%[") or tool.Name
                    if base == pname then
                        local uuid = tool:GetAttribute("PET_UUID") or tool:GetAttribute("c")
                        if uuid then
                            -- move tool to character before firing EquipPet
                            if tool.Parent ~= char then
                                tool.Parent = char
                                task.wait(0.15)
                            end
                            local hrp = char:FindFirstChild("HumanoidRootPart")
                            PetsRE:FireServer("EquipPet", uuid, hrp and hrp.CFrame or CFrame.new())
                            return
                        end
                    end
                end
            end
        end

        unequipOthers()
        equipOne()

            local prog, target = progress("GrowPetToAge", pname)
            if prog >= target then break end
            if prog > lastProg then lastProg, t0 = prog, os.clock() end
            if os.clock() - t0 > STALL_TIME then break end
            equipOne()
            task.wait(5)
        end

        growing = false
    end


	--------------------------------------------------------------
	-- 1. better âbase nameâ helper (strip [..] & trailing â xNâ)
	--------------------------------------------------------------
	local function baseName(toolName)
		local noBrackets = toolName:gsub("%s*%b[]", "")        -- remove â[â¦]â
		return (noBrackets
		:gsub("%s*[xX]%d+$", "")                            -- strip â xNâ
		:gsub("%s+$",""))                                   -- trim end spaces
	end

	--------------------------------------------------------------
	-- 2. locate + equip the required input tool, returning UUID
	--------------------------------------------------------------
	local ReversedItemTypeEnums = require(game:GetService("ReplicatedStorage").Data.EnumRegistry.ReversedItemTypeEnums)

	local function fetchInput(req)
			if not tool:IsA("Tool") or baseName(tool.Name) ~= req.ItemData.ItemName then continue end
			local attrTypeKey = inventory_enums["ITEM_TYPE"]
			local attrNameKey = inventory_enums["ItemName"]
			local attrUUIDKey = inventory_enums["ITEM_UUID"]

			local attrItemType = tool:GetAttribute("b")
			local attrItemName = tool:GetAttribute("f") or tool:GetAttribute("l") or baseName(tool.Name)

			-- Safety checks
			if not attrItemType then
				warn("â ï¸ Missing ITEM_TYPE attribute for tool:", baseName(tool.Name))
				continue
			-- else
			-- 	warn("Type: ", attrItemType)
			end
			if not attrItemName then
				warn("â ï¸ Missing ItemName attribute for tool:", baseName(tool.Name))
				continue
			-- else
			-- 	warn("Name: ", attrItemName)
			end

			local decodedType = item_codes[attrItemType]
			if not decodedType then
				warn("â ï¸ Unknown attrItemType:", attrItemType, "from tool:", tool.Name)
				continue
			-- else
			-- 	warn("dType: ",decodedType)
			end

			-- Matching check
			if decodedType == req.ItemType and attrItemName == req.ItemData.ItemName then
				print("â MATCHED:", decodedType, "|", attrItemName)
				tool.Parent = player.Character
				equipTool(tool)
				return tool:GetAttribute(attrUUIDKey) or tool:GetAttribute("c")
			end
		end

		warn("â No match for â Type:", req.ItemType, "Name:", req.ItemData.ItemName)
		return nil
	end




	--------------------------------------------------------------
	-- 3. correct model look-up for each workbench
	--------------------------------------------------------------
	local function modelFor(machineType)
		if machineType == "GearEventWorkbench" then
		elseif machineType == "DinoEventWorkbench" then
		end
	end

	--------------------------------------------------------------
	--------------------------------------------------------------

			return
		end

		local bench = modelFor(machineType)
		if not bench then
			return
		end
		print("have bench", bench)

		-- stall timer setup

			if bench:GetAttribute("IsRunning") then
				task.wait(1)
				print("running")
			else
			print("not running")
				task.wait(0.25)

				-- 2) feed inputs
				local missing = false
					local uuid = fetchInput(req)
					if not uuid then
						missing = true
						break
					end
						"InputItem",
						bench, machineType, slot,
						{ ItemType = req.ItemType, ItemData = { UUID = uuid } }
					)
					task.wait(0.15)
				end
				if missing then break end


				-- 4) stall-aware completion
				repeat
					if prog > lastProg then lastProg, t0 = prog, os.clock() end
					if os.clock() - t0 > STALL_TIME then break end
					task.wait(1)
				until prog >= tgt

			end
		end

	end



    -------------------------------------------------------------- supervisor
    local function supervisor()
        task.spawn(function()
                    if (cont.Name or cont.Container or cont.Type or ""):lower() == "dino" then
                            local prog, tgt = q.Progress or 0, goal(q)
                            if prog >= tgt then continue end

                            local arg1 = (q.Arguments or q.Args or {})[1]
                            elseif q.Type == "GrowPetToAge"  then task.spawn(growPet     , arg1)
								local itemName = (q.Arguments or q.Args or {})[2]
                            end
                        end
                    end
                end
                task.wait(3)
            end
        end)
    end

    -------------------------------------------------------------- UI toggle
        Tooltip = "Save Position first before you toggle this.",
        Default = false,
        Callback = function(v)
        end
    })
end

	Default = false,
	Callback = function(state)

		task.spawn(function()
					pcall(function()
					end)
					task.wait(0.25)
				end
			end
		end)
	end
})



local autoRemove = false
local selectedFruits = {}
-- Dropdown handler
plant:AddDropdown("plant_dropdown", {
	Text = "Plant List",
	Values = allPlant,
	Tooltip = "Select plants to shovel",
	Multi = true,
	Searchable = true,
	Callback = function(values)
		selectedFruits = keysOf(values)
	end
})

local function isSelected(name)
	return selectedFruits["All"] or selectedFruits[name]
end


	Default = false,
	Callback = function(state)
		if not state then return end

		task.spawn(function()

				if plantsFolder then
					print("Done")
					for _, plant in ipairs(plantsFolder:GetChildren()) do
						if not plant:IsA("Model") then continue end

						local baseName = cleanPlantName(plant.Name)
						if not isSelected(baseName) then continue end

						task.wait(0.1)
					end
				end

			end
		end)
	end
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoveItemRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Remove_Item")

local shovelActive = false
local autoShovelToggle


local maxFruitWeight = math.huge

plant:AddInput("max_weight_input", {
	Text = "Max Fruit Weight",
	Tooltip = "Only shovel fruits with weight less than or equal to this value",
	Placeholder = "e.g. 2.5",
	Numeric = true,
	Callback = function(value)
		local num = tonumber(value)
		if num then
			maxFruitWeight = num
		else
		end
	end
})
------------------------------------------------------------------
--  ðï¸  Auto Shovel
--       â¢ If the plant has a âFruitsâ folder â only removes those fruits
--       â¢ Otherwise removes the plant model itself
------------------------------------------------------------------
local RemoveItemRemote = game:GetService("ReplicatedStorage").GameEvents.Remove_Item   -- adjust if your remote is named differently
local shovelName       = "Shovel [Destroy Plants]"

------------------------------------------------------------------
-- helper ââ equip shovel, return true on success
------------------------------------------------------------------
local function equipShovel()
    local hum = character and character:FindFirstChildOfClass("Humanoid")
    if not hum then return false end

    if not character:FindFirstChild(shovelName) then
        if shovel then hum:EquipTool(shovel) end
    end
    for i = 1,10 do                                            -- â¤0.5 s
        if character:FindFirstChild(shovelName) then return true end
        task.wait(0.05)
    end
    return false
end

------------------------------------------------------------------
-- helper ââ unequip *any* tool when we want to pause
------------------------------------------------------------------
local function unequip()
    local hum = character and character:FindFirstChildOfClass("Humanoid")
    if hum then hum:UnequipTools() end
end


plant:AddToggle("auto_shovel_toggle", {
    Text = "Auto Shovel",
    Tooltip = "Destroys fruits (or whole plant if no Fruits folder)",
    Default = false,
    Callback = function(state)
        autoRemove = state
        if not state then unequip(); return end                -- ð¹ toggle-off

        task.spawn(function()
                local didSomething = false

                -------------------------------------------------- main sweep
                for _, plant in ipairs(plantsFolder:GetChildren()) do
                    if not autoRemove then break end

                    local base = cleanPlantName(plant.Name)
                        continue
                    end

                    ------------------------------------------------ Fruits?
                    local bucket = plant:FindFirstChild("Fruits") and plant.Fruits:GetChildren() or {plant}

                    for _, obj in ipairs(bucket) do
                        if not autoRemove then break end

                        local wv = obj:FindFirstChild("Weight") ;  local w = wv and wv.Value or 0
                        if w > maxFruitWeight or obj:GetAttribute("Favorited") then continue end

                        local tgt = obj:IsA("Model")
                                and (obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart"))
                                 or (obj:IsA("BasePart") and obj)
                        if tgt and equipShovel() then
                            RemoveItemRemote:FireServer(tgt)
                            didSomething = true
                            task.wait(0.05)
                        end
                    end
                end

                -------------------------------------------------- pause â unequip
                if not didSomething then unequip() end
                task.wait(didSomething and 0.3 or 1)
            end

            -- loop exited (toggle-off / script unload) â tidy up
            unequip()
        end)
    end
})

local function isSelectedFruit(name)
	for _, fruit in ipairs(selectedFruits) do
		if fruit == name then return true end
	end
	return false
end

-- Auto shovel loop
task.spawn(function()
		if autoRemove then
			task.wait(0.4)
			if not player.Character or not player.Character:FindFirstChild("Shovel [Destroy Plants]") then continue end

			if not plantFolder then continue end

			for _, model in ipairs(plantFolder:GetChildren()) do
				if model:IsA("Model") and isSelectedFruit(model.Name) then
                -- print(isSelectedFruit(model.Name))
					ReplicatedStorage.GameEvents:WaitForChild("Remove_Item"):FireServer("Part", model)
				end
			end
		else
			RunService.RenderStepped:Wait()
		end
	end
end)

local petRegistry = require(ReplicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"):WaitForChild("PetList"))

local petlist = {}
for petName, _ in pairs(petRegistry) do
end

local selectedpets = {}

local function getSelectedNames()
    local names = {}
        if #selectedpets > 0 then
            
            for _, name in ipairs(selectedpets) do
            end
        else
            
            for name, val in pairs(selectedpets) do
            end
        end
    end
    return names
end

local function getBaseName(toolName)
    return (toolName:gsub("%s*%b[]", "")):gsub("^%s*(.-)%s*$", "%1")
end


dino:AddDropdown("dna", {
    Text = "Pet List",
    Default = {},
    Multi = true,
    Searchable = true,
    Values = petlist,
    Callback = function(selected)
        -- print("Callback fired")
        selectedpets = selected
        
        if #selectedpets > 0 then
        else
            local names = {}
            for name, val in pairs(selectedpets) do
            end
        end
    end
})

--------------------------------------------------------------------
--  â¡ Fast Auto-DNA  (skips if machine busy)
--------------------------------------------------------------------
local autoDNA   = false
local DS        = require(game:GetService("ReplicatedStorage").Modules.DataService)
local DNA_RE    = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("DinoMachineService_RE")

-- helper â¸ strip â[ â¦ ]â parts from a tool name â base species
local function base(name)  return (name:gsub("%s*%b[]","")) end

-- helper â¸ O(1) membership test
local function toSet(t)
    local s = {};  for _,v in ipairs(t) do s[v]=true end;  return s
end

-- helper â¸ true while the Dino-Machine is working
local function machineBusy()
    local d = DS:GetData()
    return d and d.DinoMachine and d.DinoMachine.IsRunning
end

dino:AddToggle("autodnapets",{
    Text    = "Auto DNA",
    Default = false,
    Callback = function(state)
        autoDNA = state
        if not state then
            return
        end


        -- snapshot the userâs current selection once;   
        -- if your UI lets them change the list at runtime,  
        -- just rebuild wanted-set inside *that* callback instead.
        local wanted = toSet(getSelectedNames())

        task.spawn(function()
                -----------------------------------------------------
                -- only act while machine is idle
                -----------------------------------------------------
                if not machineBusy() then
                        if  tool:IsA("Tool")
                        and tool:GetAttribute("ItemType")=="Pet"
                        and wanted[ base(tool.Name) ]
                        and not tool:GetAttribute("d")          -- not already DNAâd
                        then
                            ----------------------------------------------------------------
                            -- 1) equip to character
                            ----------------------------------------------------------------
                            tool.Parent = character
                            task.wait()            -- tiny yield so the server registers equip

                            ----------------------------------------------------------------
                            -- 2) start machine
                            ----------------------------------------------------------------
                            DNA_RE:FireServer("MachineInteract")

                            break                  -- machine is now busy; wait for it to finish
                        end
                    end
                end

                task.wait(0.25)  -- iterate ~4Ã per s; tweak as you like
            end
        end)
    end
})

-- â¶ï¸ Toggle only sets the flag
    Default = false,
    Callback = function(state)
    end
})

-- â¶ï¸ Background task that always runs
task.spawn(function()
            -- grab the READY label
            local label = workspace.DinoEvent.BenchRewardPart.BenchPart.BillboardPart.BillboardGui.DnaMachineLabel
			-- print(label.Text)

            if label and label.Text == "READY" then
                -- one-liner remote
                ReplicatedStorage
                    .GameEvents
                    .DinoMachineService_RE
            end
        end

        task.wait(1)  -- check every second
    end
end)

local selectedpetss = {}
local function getSelectedNamess()
    local names = {}
        if #selectedpetss > 0 then
            
            for _, name in ipairs(selectedpetss) do
            end
        else
            
            for name, val in pairs(selectedpetss) do
            end
        end
    end
    return names
end

pet:AddDropdown("sellpetsd", {
    Text = "Pet List",
    Default = {},
    Multi = true,
    Searchable = true,
    Values = petlist,
    Callback = function(selected)
        -- print("Callback fired")
        selectedpetss = selected
        
        if #selectedpetss > 0 then
        else
            local names = {}
            for name, val in pairs(selectedpetss) do
            end
        end
    end
})
local minPetWeight = 0
pet:AddInput("MinWeight", {
    Text = "Min Weight (kg)",
    Placeholder = "Default 0",
    Callback = function(value)
        minPetWeight = tonumber(value)
    end
})
local minPetWeight = 999
pet:AddInput("MaxWeight", {
    Text = "Max Weight (kg)",
    Placeholder = "Default: 999",
    Callback = function(value)
        maxPetWeight = tonumber(value)
    end
})

pet:AddInput("MinAge", {
    Text = "Min Age",
    Placeholder = "e.g. 2",
    Callback = function(value)
        minPetAge = tonumber(value)
    end
})

local function extractStatsFromName(name)
    local weight = tonumber(name:match("%[(%d+%.?%d*)%s*KG%]")) or 0
    local age = tonumber(name:match("%[Age%s*(%d+)%]")) or 0
    return weight, age
end

pet:AddToggle("togglesellpet", {
    Text = "Auto Sell",
    Default = false,
    Callback = function(state)
        autosellpets = state

        if autosellpets then
            task.spawn(function()
                local sellRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SellPet_RE")

                    for _, selectedName in ipairs(getSelectedNamess()) do
                            if tool:GetAttribute("ItemType") == "Pet" then
                                local baseName = getBaseName(tool.Name)
                                local weight, age = extractStatsFromName(tool.Name)
								local fave = tool:GetAttribute("d")
                                if baseName == selectedName then
                                    local passesWeight = (not minPetWeight or weight >= minPetWeight)
                                        and (not maxPetWeight or weight <= maxPetWeight)
                                    local passesAge = (not minPetAge or age < minPetAge)

                                    if passesWeight and passesAge and not fave then
                                        local current = character:FindFirstChildOfClass("Tool")
                                        if current and current ~= tool then
                                            task.wait(0.2)
                                        end

                                        tool.Parent = character

                                        local timeout = 3
                                        while tool.Parent ~= character and timeout > 0 do
                                            task.wait(0.1)
                                            timeout -= 0.1
                                        end

                                        if tool.Parent == character then
                                            sellRemote:FireServer(tool)
                                            task.wait(1)
                                        end
                                    end
                                end
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end
})


local giftEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("GiftPet")
local acceptGiftRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("AcceptPetGift")
local giftNotification = player:WaitForChild("PlayerGui"):FindFirstChild("Gift_Notification")

pet:AddToggle("autoacceptpet", {
    Text = "Auto Accept Pet",
    Default = false,
    Callback = function(state)
        autoacceptpet = state
        
        giftEvent.OnClientEvent:Connect(function(petUUID, petName, fromPlayerName)
            acceptGiftRemote:FireServer(true, petUUID)
        end)
    end
})

local autogiftpets = false

local function getClosestPlayer()
    local closest = nil
    local shortest = math.huge
    local myChar = player.Character or player.CharacterAdded:Wait()

    for _, other in ipairs(Players:GetPlayers()) do
        if other ~= player and other.Character then
            local dist = (myChar:GetPivot().Position - other.Character:GetPivot().Position).Magnitude
            if dist < MIN_DISTANCE and dist < shortest then
                closest = other
                shortest = dist
            end
        end
    end

    return closest
end

pet:AddToggle("autogiftpets", {
    Text = "Auto Gift Selected Pets",
    Tooltip = "Will gift pet to nearest player",
    Default = false,
    Callback = function(state)
        autogiftpets = state

        if autogiftpets then
            task.spawn(function()

                    local targetPlayer = getClosestPlayer()

                        for _, selectedName in ipairs(getSelectedNames()) do
                                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                                    local baseName = getBaseName(tool.Name)

                                    if baseName == selectedName and not tool:GetAttribute("d") then
                                        local currentTool = character:FindFirstChildOfClass("Tool")
                                        if currentTool and currentTool ~= tool then
                                            task.wait(0.1)
                                        end
                                        tool.Parent = character
                                        local timeout = 3
                                        while tool.Parent ~= character and timeout > 0 do
                                            task.wait(0.1)
                                            timeout -= 0.1
                                        end
                                        if tool.Parent == character then
                                            giftingService:GivePet(targetPlayer)
                                            task.wait(0.1)
                                        end

                                        break
                                    end
                                    
                                    local timeout = 3
                                    while tool.Parent ~= character and timeout > 0 do
                                        task.wait(0.1)
                                        timeout -= 0.1
                                    end

                                end
                            end
                        end
                    end

                    task.wait(1)
                end

            end)
        else
        end
    end
})

local plantsList
local function getPlants()
    local uniqueNames = {}
    plantsList = {}

    if plantsFolder then
        for _, plant in ipairs(plantsFolder:GetChildren()) do
            if plant:isA("Model") then
                local name = plant.Name
                if not uniqueNames[name] then
                    uniqueNames[name] = true
                end
            end
        end
    end
    return plantsList
end

local selectedPlantss = {}
local plantsList = getPlants()
trowel:AddDropdown("current_plant_dropdown", {
    Text = "Owned Plants",
    Default = {},
    Multi = true,
    Searchable = true,
    Values = plantsList,
    Callback = function(selected)
        selectedPlantss = {}

            for k, v in pairs(selected) do
                if v then
                end
            end
        else
        end
	end
})

local function getTrowel()
		if tool:IsA("Tool") and tool.Name:match("^Trowel") then
			return tool
		end
	end
end

local function moveSelectedPlantType()
	if not savedPosition then
		return
	end

	local trowel = getTrowel()
	if not trowel then
		return
	end

	local selected = selectedPlantss[1]
	if not selected then
		return
	end

	local trowelRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("TrowelRemote")
	
	if not plantFolder then
		warn("â Could not find Plants_Physical.")
		return
	end

	for _, plant in ipairs(plantFolder:GetChildren()) do
		if plant:IsA("Model") and plant.Name == selected then
			local success, err = pcall(function()
				-- Pick up
				trowelRemote:InvokeServer("Pickup", trowel, plant)
				task.wait(0.2)

				-- Place at saved position
				trowelRemote:InvokeServer("Place", trowel, plant, savedPosition)
				task.wait(0.1)
			end)

			if not success then
				warn("â Error moving plant:", plant.Name, err)
			end
		end
	end
end

trowel:AddToggle("remote_trowel", {
    Text = "Move",
    Default = false,
    Callback = function(state)
        moveSelectedPlantType()
    end
})

-- services & modules
local replicated_storage = game:GetService("ReplicatedStorage")
local players            = game:GetService("Players")


-- player & inventory
local player   = players.LocalPlayer

-- UI state

-- build dropdown values
end

-----------------------------------------------------------------
--  UI SETUP
-----------------------------------------------------------------
    Searchable = true,
    end
})

    Default = false,
    Callback = function(state)
    end
})

--âââââââââââââââââââââââââââââââââââââââââââââââââ
-- strip â[â¦]â metadata AND any trailing â xNâ count
--âââââââââââââââââââââââââââââââââââââââââââââââââ
local function get_base_name(item_name)
    -- 1) drop â[â¦]â
    local base = item_name:match("^(.-) %[[^%]]+%]$") or item_name
    -- 2) drop â x6â, â X10â, etc.
    base = base:gsub("%s*[xX]%d+$", "")
    return base
end
local function uuid_for_input(input_req)
    local want_type = input_req.ItemType        -- e.g. "Sprinkler"
    local want_name = input_req.ItemData.ItemName  -- e.g. "Basic Sprinkler"

        if not tool:IsA("Tool") then continue end

        -- normalize tool.Name into âBasic Sprinklerâ
        local tool_name = tool:GetAttribute("ItemName")
                          or get_base_name(tool.Name)

        -- (optional) debug  
        -- print("ð checking:", tool.Name, "â normalized:", tool_name)

        if tool_name == want_name then
            if equip_tool_reliable(tool) then
                return tool:GetAttribute("UUID")
                    or tool:GetAttribute("c")
            end
        end
    end

    return nil
end


local function isOnCooldown(bench)
        bench,
    )
    end
    return false
end

task.spawn(function()

            -- pause if either bench is still cooling down
                task.wait(2)
                continue
            end

            -- global pause: any machine busy?
            local anyBusy = false
            for _, m in ipairs(workspace:GetDescendants()) do
                if m.GetAttribute
                   and m:GetAttribute("IsRunning")
                then
                    anyBusy = true
                    break
                end
            end

            if not anyBusy then
                for _, machine in ipairs(workspace:GetDescendants()) do
                    if machine.GetAttribute
                       and not machine:GetAttribute("IsRunning")
                    then

                        task.wait(0.2)

                        -- feed ingredients
                        local missing = false
                            local uuid = uuid_for_input(input_req)
                            if not uuid then
                                task.wait(5)
                                missing = true
                                break
                            end
                                "InputItem",
                                machine, selected_machine_type, slot,
                                { ItemType = input_req.ItemType, ItemData = { UUID = uuid } }
                            )
                            task.wait(0.1)
                        end

                        if not missing then

                            while machine:GetAttribute("IsRunning") do
                                task.wait(1)
                            end
                        end
                    end
                end
            end
        end

        task.wait(2)
    end
end)







	busy = false
end)

-- Dropdown
	Multi = true,
	Searchable = true,
	Callback = function(selected)
	end
})

	Text = "Auto Open",
	Default = false,
	Callback = function(state)
		autoOpen = state
		if not state then return end
		local Remotes = require(ReplicatedStorage.Modules.Remotes)
		local busy = false
		task.spawn(function()
			while autoOpen do
						busy = true
						repeat task.wait(0.1) until not busy or not autoOpen
					end
				end
				task.wait(1)
			end
		end)
	end
})



SaveManager:SetIgnoreIndexes({"MenuKeybind"})

ThemeManager:SetFolder("Y-Hub")
SaveManager:SetFolder("Y-Hub/Grow-a-Garden")

SaveManager:BuildConfigSection(setting["UI Settings"])

if SaveManager:GetAutoloadConfig() == "none" then
    SaveManager:SaveAutoloadConfig("Grow-a-Garden")
end

SaveManager:LoadAutoloadConfig()
SaveManager:AutoSave(1)
